"use strict";
(self.webpackChunkhackerrank_lib = self.webpackChunkhackerrank_lib || []).push([
    ["defaultVendors-node_modules_vscode_vscode_src_vs_base_common_charCode_js-node_modules_vscode_-cb7d75"], {
        U7Xe: (e, i, n) => {
            var t;
            n.d(i, {
                    m: () => t
                }),
                function(e) {
                    e[e.Null = 0] = "Null", e[e.Backspace = 8] = "Backspace", e[e.Tab = 9] = "Tab", e[e.LineFeed = 10] = "LineFeed", e[e.CarriageReturn = 13] = "CarriageReturn", e[e.Space = 32] = "Space", e[e.ExclamationMark = 33] = "ExclamationMark", e[e.DoubleQuote = 34] = "DoubleQuote", e[e.Hash = 35] = "Hash", e[e.DollarSign = 36] = "DollarSign", e[e.PercentSign = 37] = "PercentSign", e[e.Ampersand = 38] = "Ampersand", e[e.SingleQuote = 39] = "SingleQuote", e[e.OpenParen = 40] = "OpenParen", e[e.CloseParen = 41] = "CloseParen", e[e.Asterisk = 42] = "Asterisk", e[e.Plus = 43] = "Plus", e[e.Comma = 44] = "Comma", e[e.Dash = 45] = "Dash", e[e.Period = 46] = "Period", e[e.Slash = 47] = "Slash", e[e.Digit0 = 48] = "Digit0", e[e.Digit1 = 49] = "Digit1", e[e.Digit2 = 50] = "Digit2", e[e.Digit3 = 51] = "Digit3", e[e.Digit4 = 52] = "Digit4", e[e.Digit5 = 53] = "Digit5", e[e.Digit6 = 54] = "Digit6", e[e.Digit7 = 55] = "Digit7", e[e.Digit8 = 56] = "Digit8", e[e.Digit9 = 57] = "Digit9", e[e.Colon = 58] = "Colon", e[e.Semicolon = 59] = "Semicolon", e[e.LessThan = 60] = "LessThan", e[e.Equals = 61] = "Equals", e[e.GreaterThan = 62] = "GreaterThan", e[e.QuestionMark = 63] = "QuestionMark", e[e.AtSign = 64] = "AtSign", e[e.A = 65] = "A", e[e.B = 66] = "B", e[e.C = 67] = "C", e[e.D = 68] = "D", e[e.E = 69] = "E", e[e.F = 70] = "F", e[e.G = 71] = "G", e[e.H = 72] = "H", e[e.I = 73] = "I", e[e.J = 74] = "J", e[e.K = 75] = "K", e[e.L = 76] = "L", e[e.M = 77] = "M", e[e.N = 78] = "N", e[e.O = 79] = "O", e[e.P = 80] = "P", e[e.Q = 81] = "Q", e[e.R = 82] = "R", e[e.S = 83] = "S", e[e.T = 84] = "T", e[e.U = 85] = "U", e[e.V = 86] = "V", e[e.W = 87] = "W", e[e.X = 88] = "X", e[e.Y = 89] = "Y", e[e.Z = 90] = "Z", e[e.OpenSquareBracket = 91] = "OpenSquareBracket", e[e.Backslash = 92] = "Backslash", e[e.CloseSquareBracket = 93] = "CloseSquareBracket", e[e.Caret = 94] = "Caret", e[e.Underline = 95] = "Underline", e[e.BackTick = 96] = "BackTick", e[e.a = 97] = "a", e[e.b = 98] = "b", e[e.c = 99] = "c", e[e.d = 100] = "d", e[e.e = 101] = "e", e[e.f = 102] = "f", e[e.g = 103] = "g", e[e.h = 104] = "h", e[e.i = 105] = "i", e[e.j = 106] = "j", e[e.k = 107] = "k", e[e.l = 108] = "l", e[e.m = 109] = "m", e[e.n = 110] = "n", e[e.o = 111] = "o", e[e.p = 112] = "p", e[e.q = 113] = "q", e[e.r = 114] = "r", e[e.s = 115] = "s", e[e.t = 116] = "t", e[e.u = 117] = "u", e[e.v = 118] = "v", e[e.w = 119] = "w", e[e.x = 120] = "x", e[e.y = 121] = "y", e[e.z = 122] = "z", e[e.OpenCurlyBrace = 123] = "OpenCurlyBrace", e[e.Pipe = 124] = "Pipe", e[e.CloseCurlyBrace = 125] = "CloseCurlyBrace", e[e.Tilde = 126] = "Tilde", e[e.NoBreakSpace = 160] = "NoBreakSpace", e[e.U_Combining_Grave_Accent = 768] = "U_Combining_Grave_Accent", e[e.U_Combining_Acute_Accent = 769] = "U_Combining_Acute_Accent", e[e.U_Combining_Circumflex_Accent = 770] = "U_Combining_Circumflex_Accent", e[e.U_Combining_Tilde = 771] = "U_Combining_Tilde", e[e.U_Combining_Macron = 772] = "U_Combining_Macron", e[e.U_Combining_Overline = 773] = "U_Combining_Overline", e[e.U_Combining_Breve = 774] = "U_Combining_Breve", e[e.U_Combining_Dot_Above = 775] = "U_Combining_Dot_Above", e[e.U_Combining_Diaeresis = 776] = "U_Combining_Diaeresis", e[e.U_Combining_Hook_Above = 777] = "U_Combining_Hook_Above", e[e.U_Combining_Ring_Above = 778] = "U_Combining_Ring_Above", e[e.U_Combining_Double_Acute_Accent = 779] = "U_Combining_Double_Acute_Accent", e[e.U_Combining_Caron = 780] = "U_Combining_Caron", e[e.U_Combining_Vertical_Line_Above = 781] = "U_Combining_Vertical_Line_Above", e[e.U_Combining_Double_Vertical_Line_Above = 782] = "U_Combining_Double_Vertical_Line_Above", e[e.U_Combining_Double_Grave_Accent = 783] = "U_Combining_Double_Grave_Accent", e[e.U_Combining_Candrabindu = 784] = "U_Combining_Candrabindu", e[e.U_Combining_Inverted_Breve = 785] = "U_Combining_Inverted_Breve", e[e.U_Combining_Turned_Comma_Above = 786] = "U_Combining_Turned_Comma_Above", e[e.U_Combining_Comma_Above = 787] = "U_Combining_Comma_Above", e[e.U_Combining_Reversed_Comma_Above = 788] = "U_Combining_Reversed_Comma_Above", e[e.U_Combining_Comma_Above_Right = 789] = "U_Combining_Comma_Above_Right", e[e.U_Combining_Grave_Accent_Below = 790] = "U_Combining_Grave_Accent_Below", e[e.U_Combining_Acute_Accent_Below = 791] = "U_Combining_Acute_Accent_Below", e[e.U_Combining_Left_Tack_Below = 792] = "U_Combining_Left_Tack_Below", e[e.U_Combining_Right_Tack_Below = 793] = "U_Combining_Right_Tack_Below", e[e.U_Combining_Left_Angle_Above = 794] = "U_Combining_Left_Angle_Above", e[e.U_Combining_Horn = 795] = "U_Combining_Horn", e[e.U_Combining_Left_Half_Ring_Below = 796] = "U_Combining_Left_Half_Ring_Below", e[e.U_Combining_Up_Tack_Below = 797] = "U_Combining_Up_Tack_Below", e[e.U_Combining_Down_Tack_Below = 798] = "U_Combining_Down_Tack_Below", e[e.U_Combining_Plus_Sign_Below = 799] = "U_Combining_Plus_Sign_Below", e[e.U_Combining_Minus_Sign_Below = 800] = "U_Combining_Minus_Sign_Below", e[e.U_Combining_Palatalized_Hook_Below = 801] = "U_Combining_Palatalized_Hook_Below", e[e.U_Combining_Retroflex_Hook_Below = 802] = "U_Combining_Retroflex_Hook_Below", e[e.U_Combining_Dot_Below = 803] = "U_Combining_Dot_Below", e[e.U_Combining_Diaeresis_Below = 804] = "U_Combining_Diaeresis_Below", e[e.U_Combining_Ring_Below = 805] = "U_Combining_Ring_Below", e[e.U_Combining_Comma_Below = 806] = "U_Combining_Comma_Below", e[e.U_Combining_Cedilla = 807] = "U_Combining_Cedilla", e[e.U_Combining_Ogonek = 808] = "U_Combining_Ogonek", e[e.U_Combining_Vertical_Line_Below = 809] = "U_Combining_Vertical_Line_Below", e[e.U_Combining_Bridge_Below = 810] = "U_Combining_Bridge_Below", e[e.U_Combining_Inverted_Double_Arch_Below = 811] = "U_Combining_Inverted_Double_Arch_Below", e[e.U_Combining_Caron_Below = 812] = "U_Combining_Caron_Below", e[e.U_Combining_Circumflex_Accent_Below = 813] = "U_Combining_Circumflex_Accent_Below", e[e.U_Combining_Breve_Below = 814] = "U_Combining_Breve_Below", e[e.U_Combining_Inverted_Breve_Below = 815] = "U_Combining_Inverted_Breve_Below", e[e.U_Combining_Tilde_Below = 816] = "U_Combining_Tilde_Below", e[e.U_Combining_Macron_Below = 817] = "U_Combining_Macron_Below", e[e.U_Combining_Low_Line = 818] = "U_Combining_Low_Line", e[e.U_Combining_Double_Low_Line = 819] = "U_Combining_Double_Low_Line", e[e.U_Combining_Tilde_Overlay = 820] = "U_Combining_Tilde_Overlay", e[e.U_Combining_Short_Stroke_Overlay = 821] = "U_Combining_Short_Stroke_Overlay", e[e.U_Combining_Long_Stroke_Overlay = 822] = "U_Combining_Long_Stroke_Overlay", e[e.U_Combining_Short_Solidus_Overlay = 823] = "U_Combining_Short_Solidus_Overlay", e[e.U_Combining_Long_Solidus_Overlay = 824] = "U_Combining_Long_Solidus_Overlay", e[e.U_Combining_Right_Half_Ring_Below = 825] = "U_Combining_Right_Half_Ring_Below", e[e.U_Combining_Inverted_Bridge_Below = 826] = "U_Combining_Inverted_Bridge_Below", e[e.U_Combining_Square_Below = 827] = "U_Combining_Square_Below", e[e.U_Combining_Seagull_Below = 828] = "U_Combining_Seagull_Below", e[e.U_Combining_X_Above = 829] = "U_Combining_X_Above", e[e.U_Combining_Vertical_Tilde = 830] = "U_Combining_Vertical_Tilde", e[e.U_Combining_Double_Overline = 831] = "U_Combining_Double_Overline", e[e.U_Combining_Grave_Tone_Mark = 832] = "U_Combining_Grave_Tone_Mark", e[e.U_Combining_Acute_Tone_Mark = 833] = "U_Combining_Acute_Tone_Mark", e[e.U_Combining_Greek_Perispomeni = 834] = "U_Combining_Greek_Perispomeni", e[e.U_Combining_Greek_Koronis = 835] = "U_Combining_Greek_Koronis", e[e.U_Combining_Greek_Dialytika_Tonos = 836] = "U_Combining_Greek_Dialytika_Tonos", e[e.U_Combining_Greek_Ypogegrammeni = 837] = "U_Combining_Greek_Ypogegrammeni", e[e.U_Combining_Bridge_Above = 838] = "U_Combining_Bridge_Above", e[e.U_Combining_Equals_Sign_Below = 839] = "U_Combining_Equals_Sign_Below", e[e.U_Combining_Double_Vertical_Line_Below = 840] = "U_Combining_Double_Vertical_Line_Below", e[e.U_Combining_Left_Angle_Below = 841] = "U_Combining_Left_Angle_Below", e[e.U_Combining_Not_Tilde_Above = 842] = "U_Combining_Not_Tilde_Above", e[e.U_Combining_Homothetic_Above = 843] = "U_Combining_Homothetic_Above", e[e.U_Combining_Almost_Equal_To_Above = 844] = "U_Combining_Almost_Equal_To_Above", e[e.U_Combining_Left_Right_Arrow_Below = 845] = "U_Combining_Left_Right_Arrow_Below", e[e.U_Combining_Upwards_Arrow_Below = 846] = "U_Combining_Upwards_Arrow_Below", e[e.U_Combining_Grapheme_Joiner = 847] = "U_Combining_Grapheme_Joiner", e[e.U_Combining_Right_Arrowhead_Above = 848] = "U_Combining_Right_Arrowhead_Above", e[e.U_Combining_Left_Half_Ring_Above = 849] = "U_Combining_Left_Half_Ring_Above", e[e.U_Combining_Fermata = 850] = "U_Combining_Fermata", e[e.U_Combining_X_Below = 851] = "U_Combining_X_Below", e[e.U_Combining_Left_Arrowhead_Below = 852] = "U_Combining_Left_Arrowhead_Below", e[e.U_Combining_Right_Arrowhead_Below = 853] = "U_Combining_Right_Arrowhead_Below", e[e.U_Combining_Right_Arrowhead_And_Up_Arrowhead_Below = 854] = "U_Combining_Right_Arrowhead_And_Up_Arrowhead_Below", e[e.U_Combining_Right_Half_Ring_Above = 855] = "U_Combining_Right_Half_Ring_Above", e[e.U_Combining_Dot_Above_Right = 856] = "U_Combining_Dot_Above_Right", e[e.U_Combining_Asterisk_Below = 857] = "U_Combining_Asterisk_Below", e[e.U_Combining_Double_Ring_Below = 858] = "U_Combining_Double_Ring_Below", e[e.U_Combining_Zigzag_Above = 859] = "U_Combining_Zigzag_Above", e[e.U_Combining_Double_Breve_Below = 860] = "U_Combining_Double_Breve_Below", e[e.U_Combining_Double_Breve = 861] = "U_Combining_Double_Breve", e[e.U_Combining_Double_Macron = 862] = "U_Combining_Double_Macron", e[e.U_Combining_Double_Macron_Below = 863] = "U_Combining_Double_Macron_Below", e[e.U_Combining_Double_Tilde = 864] = "U_Combining_Double_Tilde", e[e.U_Combining_Double_Inverted_Breve = 865] = "U_Combining_Double_Inverted_Breve", e[e.U_Combining_Double_Rightwards_Arrow_Below = 866] = "U_Combining_Double_Rightwards_Arrow_Below", e[e.U_Combining_Latin_Small_Letter_A = 867] = "U_Combining_Latin_Small_Letter_A", e[e.U_Combining_Latin_Small_Letter_E = 868] = "U_Combining_Latin_Small_Letter_E", e[e.U_Combining_Latin_Small_Letter_I = 869] = "U_Combining_Latin_Small_Letter_I", e[e.U_Combining_Latin_Small_Letter_O = 870] = "U_Combining_Latin_Small_Letter_O", e[e.U_Combining_Latin_Small_Letter_U = 871] = "U_Combining_Latin_Small_Letter_U", e[e.U_Combining_Latin_Small_Letter_C = 872] = "U_Combining_Latin_Small_Letter_C", e[e.U_Combining_Latin_Small_Letter_D = 873] = "U_Combining_Latin_Small_Letter_D", e[e.U_Combining_Latin_Small_Letter_H = 874] = "U_Combining_Latin_Small_Letter_H", e[e.U_Combining_Latin_Small_Letter_M = 875] = "U_Combining_Latin_Small_Letter_M", e[e.U_Combining_Latin_Small_Letter_R = 876] = "U_Combining_Latin_Small_Letter_R", e[e.U_Combining_Latin_Small_Letter_T = 877] = "U_Combining_Latin_Small_Letter_T", e[e.U_Combining_Latin_Small_Letter_V = 878] = "U_Combining_Latin_Small_Letter_V", e[e.U_Combining_Latin_Small_Letter_X = 879] = "U_Combining_Latin_Small_Letter_X", e[e.LINE_SEPARATOR = 8232] = "LINE_SEPARATOR", e[e.PARAGRAPH_SEPARATOR = 8233] = "PARAGRAPH_SEPARATOR", e[e.NEXT_LINE = 133] = "NEXT_LINE", e[e.U_CIRCUMFLEX = 94] = "U_CIRCUMFLEX", e[e.U_GRAVE_ACCENT = 96] = "U_GRAVE_ACCENT", e[e.U_DIAERESIS = 168] = "U_DIAERESIS", e[e.U_MACRON = 175] = "U_MACRON", e[e.U_ACUTE_ACCENT = 180] = "U_ACUTE_ACCENT", e[e.U_CEDILLA = 184] = "U_CEDILLA", e[e.U_MODIFIER_LETTER_LEFT_ARROWHEAD = 706] = "U_MODIFIER_LETTER_LEFT_ARROWHEAD", e[e.U_MODIFIER_LETTER_RIGHT_ARROWHEAD = 707] = "U_MODIFIER_LETTER_RIGHT_ARROWHEAD", e[e.U_MODIFIER_LETTER_UP_ARROWHEAD = 708] = "U_MODIFIER_LETTER_UP_ARROWHEAD", e[e.U_MODIFIER_LETTER_DOWN_ARROWHEAD = 709] = "U_MODIFIER_LETTER_DOWN_ARROWHEAD", e[e.U_MODIFIER_LETTER_CENTRED_RIGHT_HALF_RING = 722] = "U_MODIFIER_LETTER_CENTRED_RIGHT_HALF_RING", e[e.U_MODIFIER_LETTER_CENTRED_LEFT_HALF_RING = 723] = "U_MODIFIER_LETTER_CENTRED_LEFT_HALF_RING", e[e.U_MODIFIER_LETTER_UP_TACK = 724] = "U_MODIFIER_LETTER_UP_TACK", e[e.U_MODIFIER_LETTER_DOWN_TACK = 725] = "U_MODIFIER_LETTER_DOWN_TACK", e[e.U_MODIFIER_LETTER_PLUS_SIGN = 726] = "U_MODIFIER_LETTER_PLUS_SIGN", e[e.U_MODIFIER_LETTER_MINUS_SIGN = 727] = "U_MODIFIER_LETTER_MINUS_SIGN", e[e.U_BREVE = 728] = "U_BREVE", e[e.U_DOT_ABOVE = 729] = "U_DOT_ABOVE", e[e.U_RING_ABOVE = 730] = "U_RING_ABOVE", e[e.U_OGONEK = 731] = "U_OGONEK", e[e.U_SMALL_TILDE = 732] = "U_SMALL_TILDE", e[e.U_DOUBLE_ACUTE_ACCENT = 733] = "U_DOUBLE_ACUTE_ACCENT", e[e.U_MODIFIER_LETTER_RHOTIC_HOOK = 734] = "U_MODIFIER_LETTER_RHOTIC_HOOK", e[e.U_MODIFIER_LETTER_CROSS_ACCENT = 735] = "U_MODIFIER_LETTER_CROSS_ACCENT", e[e.U_MODIFIER_LETTER_EXTRA_HIGH_TONE_BAR = 741] = "U_MODIFIER_LETTER_EXTRA_HIGH_TONE_BAR", e[e.U_MODIFIER_LETTER_HIGH_TONE_BAR = 742] = "U_MODIFIER_LETTER_HIGH_TONE_BAR", e[e.U_MODIFIER_LETTER_MID_TONE_BAR = 743] = "U_MODIFIER_LETTER_MID_TONE_BAR", e[e.U_MODIFIER_LETTER_LOW_TONE_BAR = 744] = "U_MODIFIER_LETTER_LOW_TONE_BAR", e[e.U_MODIFIER_LETTER_EXTRA_LOW_TONE_BAR = 745] = "U_MODIFIER_LETTER_EXTRA_LOW_TONE_BAR", e[e.U_MODIFIER_LETTER_YIN_DEPARTING_TONE_MARK = 746] = "U_MODIFIER_LETTER_YIN_DEPARTING_TONE_MARK", e[e.U_MODIFIER_LETTER_YANG_DEPARTING_TONE_MARK = 747] = "U_MODIFIER_LETTER_YANG_DEPARTING_TONE_MARK", e[e.U_MODIFIER_LETTER_UNASPIRATED = 749] = "U_MODIFIER_LETTER_UNASPIRATED", e[e.U_MODIFIER_LETTER_LOW_DOWN_ARROWHEAD = 751] = "U_MODIFIER_LETTER_LOW_DOWN_ARROWHEAD", e[e.U_MODIFIER_LETTER_LOW_UP_ARROWHEAD = 752] = "U_MODIFIER_LETTER_LOW_UP_ARROWHEAD", e[e.U_MODIFIER_LETTER_LOW_LEFT_ARROWHEAD = 753] = "U_MODIFIER_LETTER_LOW_LEFT_ARROWHEAD", e[e.U_MODIFIER_LETTER_LOW_RIGHT_ARROWHEAD = 754] = "U_MODIFIER_LETTER_LOW_RIGHT_ARROWHEAD", e[e.U_MODIFIER_LETTER_LOW_RING = 755] = "U_MODIFIER_LETTER_LOW_RING", e[e.U_MODIFIER_LETTER_MIDDLE_GRAVE_ACCENT = 756] = "U_MODIFIER_LETTER_MIDDLE_GRAVE_ACCENT", e[e.U_MODIFIER_LETTER_MIDDLE_DOUBLE_GRAVE_ACCENT = 757] = "U_MODIFIER_LETTER_MIDDLE_DOUBLE_GRAVE_ACCENT", e[e.U_MODIFIER_LETTER_MIDDLE_DOUBLE_ACUTE_ACCENT = 758] = "U_MODIFIER_LETTER_MIDDLE_DOUBLE_ACUTE_ACCENT", e[e.U_MODIFIER_LETTER_LOW_TILDE = 759] = "U_MODIFIER_LETTER_LOW_TILDE", e[e.U_MODIFIER_LETTER_RAISED_COLON = 760] = "U_MODIFIER_LETTER_RAISED_COLON", e[e.U_MODIFIER_LETTER_BEGIN_HIGH_TONE = 761] = "U_MODIFIER_LETTER_BEGIN_HIGH_TONE", e[e.U_MODIFIER_LETTER_END_HIGH_TONE = 762] = "U_MODIFIER_LETTER_END_HIGH_TONE", e[e.U_MODIFIER_LETTER_BEGIN_LOW_TONE = 763] = "U_MODIFIER_LETTER_BEGIN_LOW_TONE", e[e.U_MODIFIER_LETTER_END_LOW_TONE = 764] = "U_MODIFIER_LETTER_END_LOW_TONE", e[e.U_MODIFIER_LETTER_SHELF = 765] = "U_MODIFIER_LETTER_SHELF", e[e.U_MODIFIER_LETTER_OPEN_SHELF = 766] = "U_MODIFIER_LETTER_OPEN_SHELF", e[e.U_MODIFIER_LETTER_LOW_LEFT_ARROW = 767] = "U_MODIFIER_LETTER_LOW_LEFT_ARROW", e[e.U_GREEK_LOWER_NUMERAL_SIGN = 885] = "U_GREEK_LOWER_NUMERAL_SIGN", e[e.U_GREEK_TONOS = 900] = "U_GREEK_TONOS", e[e.U_GREEK_DIALYTIKA_TONOS = 901] = "U_GREEK_DIALYTIKA_TONOS", e[e.U_GREEK_KORONIS = 8125] = "U_GREEK_KORONIS", e[e.U_GREEK_PSILI = 8127] = "U_GREEK_PSILI", e[e.U_GREEK_PERISPOMENI = 8128] = "U_GREEK_PERISPOMENI", e[e.U_GREEK_DIALYTIKA_AND_PERISPOMENI = 8129] = "U_GREEK_DIALYTIKA_AND_PERISPOMENI", e[e.U_GREEK_PSILI_AND_VARIA = 8141] = "U_GREEK_PSILI_AND_VARIA", e[e.U_GREEK_PSILI_AND_OXIA = 8142] = "U_GREEK_PSILI_AND_OXIA", e[e.U_GREEK_PSILI_AND_PERISPOMENI = 8143] = "U_GREEK_PSILI_AND_PERISPOMENI", e[e.U_GREEK_DASIA_AND_VARIA = 8157] = "U_GREEK_DASIA_AND_VARIA", e[e.U_GREEK_DASIA_AND_OXIA = 8158] = "U_GREEK_DASIA_AND_OXIA", e[e.U_GREEK_DASIA_AND_PERISPOMENI = 8159] = "U_GREEK_DASIA_AND_PERISPOMENI", e[e.U_GREEK_DIALYTIKA_AND_VARIA = 8173] = "U_GREEK_DIALYTIKA_AND_VARIA", e[e.U_GREEK_DIALYTIKA_AND_OXIA = 8174] = "U_GREEK_DIALYTIKA_AND_OXIA", e[e.U_GREEK_VARIA = 8175] = "U_GREEK_VARIA", e[e.U_GREEK_OXIA = 8189] = "U_GREEK_OXIA", e[e.U_GREEK_DASIA = 8190] = "U_GREEK_DASIA", e[e.U_IDEOGRAPHIC_FULL_STOP = 12290] = "U_IDEOGRAPHIC_FULL_STOP", e[e.U_LEFT_CORNER_BRACKET = 12300] = "U_LEFT_CORNER_BRACKET", e[e.U_RIGHT_CORNER_BRACKET = 12301] = "U_RIGHT_CORNER_BRACKET", e[e.U_LEFT_BLACK_LENTICULAR_BRACKET = 12304] = "U_LEFT_BLACK_LENTICULAR_BRACKET", e[e.U_RIGHT_BLACK_LENTICULAR_BRACKET = 12305] = "U_RIGHT_BLACK_LENTICULAR_BRACKET", e[e.U_OVERLINE = 8254] = "U_OVERLINE", e[e.UTF8_BOM = 65279] = "UTF8_BOM", e[e.U_FULLWIDTH_SEMICOLON = 65307] = "U_FULLWIDTH_SEMICOLON", e[e.U_FULLWIDTH_COMMA = 65292] = "U_FULLWIDTH_COMMA"
                }(t || (t = {}))
        },
        "6hk+": (e, i, n) => {
            n.d(i, {
                T: () => r
            });
            var t = n("mYXM");
            const r = {
                add: (0, t.z)("add", 6e4),
                plus: (0, t.z)("plus", 6e4),
                gistNew: (0, t.z)("gist-new", 6e4),
                repoCreate: (0, t.z)("repo-create", 6e4),
                lightbulb: (0, t.z)("lightbulb", 60001),
                lightBulb: (0, t.z)("light-bulb", 60001),
                repo: (0, t.z)("repo", 60002),
                repoDelete: (0, t.z)("repo-delete", 60002),
                gistFork: (0, t.z)("gist-fork", 60003),
                repoForked: (0, t.z)("repo-forked", 60003),
                gitPullRequest: (0, t.z)("git-pull-request", 60004),
                gitPullRequestAbandoned: (0, t.z)("git-pull-request-abandoned", 60004),
                recordKeys: (0, t.z)("record-keys", 60005),
                keyboard: (0, t.z)("keyboard", 60005),
                tag: (0, t.z)("tag", 60006),
                gitPullRequestLabel: (0, t.z)("git-pull-request-label", 60006),
                tagAdd: (0, t.z)("tag-add", 60006),
                tagRemove: (0, t.z)("tag-remove", 60006),
                person: (0, t.z)("person", 60007),
                personFollow: (0, t.z)("person-follow", 60007),
                personOutline: (0, t.z)("person-outline", 60007),
                personFilled: (0, t.z)("person-filled", 60007),
                gitBranch: (0, t.z)("git-branch", 60008),
                gitBranchCreate: (0, t.z)("git-branch-create", 60008),
                gitBranchDelete: (0, t.z)("git-branch-delete", 60008),
                sourceControl: (0, t.z)("source-control", 60008),
                mirror: (0, t.z)("mirror", 60009),
                mirrorPublic: (0, t.z)("mirror-public", 60009),
                star: (0, t.z)("star", 60010),
                starAdd: (0, t.z)("star-add", 60010),
                starDelete: (0, t.z)("star-delete", 60010),
                starEmpty: (0, t.z)("star-empty", 60010),
                comment: (0, t.z)("comment", 60011),
                commentAdd: (0, t.z)("comment-add", 60011),
                alert: (0, t.z)("alert", 60012),
                warning: (0, t.z)("warning", 60012),
                search: (0, t.z)("search", 60013),
                searchSave: (0, t.z)("search-save", 60013),
                logOut: (0, t.z)("log-out", 60014),
                signOut: (0, t.z)("sign-out", 60014),
                logIn: (0, t.z)("log-in", 60015),
                signIn: (0, t.z)("sign-in", 60015),
                eye: (0, t.z)("eye", 60016),
                eyeUnwatch: (0, t.z)("eye-unwatch", 60016),
                eyeWatch: (0, t.z)("eye-watch", 60016),
                circleFilled: (0, t.z)("circle-filled", 60017),
                primitiveDot: (0, t.z)("primitive-dot", 60017),
                closeDirty: (0, t.z)("close-dirty", 60017),
                debugBreakpoint: (0, t.z)("debug-breakpoint", 60017),
                debugBreakpointDisabled: (0, t.z)("debug-breakpoint-disabled", 60017),
                debugHint: (0, t.z)("debug-hint", 60017),
                terminalDecorationSuccess: (0, t.z)("terminal-decoration-success", 60017),
                primitiveSquare: (0, t.z)("primitive-square", 60018),
                edit: (0, t.z)("edit", 60019),
                pencil: (0, t.z)("pencil", 60019),
                info: (0, t.z)("info", 60020),
                issueOpened: (0, t.z)("issue-opened", 60020),
                gistPrivate: (0, t.z)("gist-private", 60021),
                gitForkPrivate: (0, t.z)("git-fork-private", 60021),
                lock: (0, t.z)("lock", 60021),
                mirrorPrivate: (0, t.z)("mirror-private", 60021),
                close: (0, t.z)("close", 60022),
                removeClose: (0, t.z)("remove-close", 60022),
                x: (0, t.z)("x", 60022),
                repoSync: (0, t.z)("repo-sync", 60023),
                sync: (0, t.z)("sync", 60023),
                clone: (0, t.z)("clone", 60024),
                desktopDownload: (0, t.z)("desktop-download", 60024),
                beaker: (0, t.z)("beaker", 60025),
                microscope: (0, t.z)("microscope", 60025),
                vm: (0, t.z)("vm", 60026),
                deviceDesktop: (0, t.z)("device-desktop", 60026),
                file: (0, t.z)("file", 60027),
                fileText: (0, t.z)("file-text", 60027),
                more: (0, t.z)("more", 60028),
                ellipsis: (0, t.z)("ellipsis", 60028),
                kebabHorizontal: (0, t.z)("kebab-horizontal", 60028),
                mailReply: (0, t.z)("mail-reply", 60029),
                reply: (0, t.z)("reply", 60029),
                organization: (0, t.z)("organization", 60030),
                organizationFilled: (0, t.z)("organization-filled", 60030),
                organizationOutline: (0, t.z)("organization-outline", 60030),
                newFile: (0, t.z)("new-file", 60031),
                fileAdd: (0, t.z)("file-add", 60031),
                newFolder: (0, t.z)("new-folder", 60032),
                fileDirectoryCreate: (0, t.z)("file-directory-create", 60032),
                trash: (0, t.z)("trash", 60033),
                trashcan: (0, t.z)("trashcan", 60033),
                history: (0, t.z)("history", 60034),
                clock: (0, t.z)("clock", 60034),
                folder: (0, t.z)("folder", 60035),
                fileDirectory: (0, t.z)("file-directory", 60035),
                symbolFolder: (0, t.z)("symbol-folder", 60035),
                logoGithub: (0, t.z)("logo-github", 60036),
                markGithub: (0, t.z)("mark-github", 60036),
                github: (0, t.z)("github", 60036),
                terminal: (0, t.z)("terminal", 60037),
                console: (0, t.z)("console", 60037),
                repl: (0, t.z)("repl", 60037),
                zap: (0, t.z)("zap", 60038),
                symbolEvent: (0, t.z)("symbol-event", 60038),
                error: (0, t.z)("error", 60039),
                stop: (0, t.z)("stop", 60039),
                variable: (0, t.z)("variable", 60040),
                symbolVariable: (0, t.z)("symbol-variable", 60040),
                array: (0, t.z)("array", 60042),
                symbolArray: (0, t.z)("symbol-array", 60042),
                symbolModule: (0, t.z)("symbol-module", 60043),
                symbolPackage: (0, t.z)("symbol-package", 60043),
                symbolNamespace: (0, t.z)("symbol-namespace", 60043),
                symbolObject: (0, t.z)("symbol-object", 60043),
                symbolMethod: (0, t.z)("symbol-method", 60044),
                symbolFunction: (0, t.z)("symbol-function", 60044),
                symbolConstructor: (0, t.z)("symbol-constructor", 60044),
                symbolBoolean: (0, t.z)("symbol-boolean", 60047),
                symbolNull: (0, t.z)("symbol-null", 60047),
                symbolNumeric: (0, t.z)("symbol-numeric", 60048),
                symbolNumber: (0, t.z)("symbol-number", 60048),
                symbolStructure: (0, t.z)("symbol-structure", 60049),
                symbolStruct: (0, t.z)("symbol-struct", 60049),
                symbolParameter: (0, t.z)("symbol-parameter", 60050),
                symbolTypeParameter: (0, t.z)("symbol-type-parameter", 60050),
                symbolKey: (0, t.z)("symbol-key", 60051),
                symbolText: (0, t.z)("symbol-text", 60051),
                symbolReference: (0, t.z)("symbol-reference", 60052),
                goToFile: (0, t.z)("go-to-file", 60052),
                symbolEnum: (0, t.z)("symbol-enum", 60053),
                symbolValue: (0, t.z)("symbol-value", 60053),
                symbolRuler: (0, t.z)("symbol-ruler", 60054),
                symbolUnit: (0, t.z)("symbol-unit", 60054),
                activateBreakpoints: (0, t.z)("activate-breakpoints", 60055),
                archive: (0, t.z)("archive", 60056),
                arrowBoth: (0, t.z)("arrow-both", 60057),
                arrowDown: (0, t.z)("arrow-down", 60058),
                arrowLeft: (0, t.z)("arrow-left", 60059),
                arrowRight: (0, t.z)("arrow-right", 60060),
                arrowSmallDown: (0, t.z)("arrow-small-down", 60061),
                arrowSmallLeft: (0, t.z)("arrow-small-left", 60062),
                arrowSmallRight: (0, t.z)("arrow-small-right", 60063),
                arrowSmallUp: (0, t.z)("arrow-small-up", 60064),
                arrowUp: (0, t.z)("arrow-up", 60065),
                bell: (0, t.z)("bell", 60066),
                bold: (0, t.z)("bold", 60067),
                book: (0, t.z)("book", 60068),
                bookmark: (0, t.z)("bookmark", 60069),
                debugBreakpointConditionalUnverified: (0, t.z)("debug-breakpoint-conditional-unverified", 60070),
                debugBreakpointConditional: (0, t.z)("debug-breakpoint-conditional", 60071),
                debugBreakpointConditionalDisabled: (0, t.z)("debug-breakpoint-conditional-disabled", 60071),
                debugBreakpointDataUnverified: (0, t.z)("debug-breakpoint-data-unverified", 60072),
                debugBreakpointData: (0, t.z)("debug-breakpoint-data", 60073),
                debugBreakpointDataDisabled: (0, t.z)("debug-breakpoint-data-disabled", 60073),
                debugBreakpointLogUnverified: (0, t.z)("debug-breakpoint-log-unverified", 60074),
                debugBreakpointLog: (0, t.z)("debug-breakpoint-log", 60075),
                debugBreakpointLogDisabled: (0, t.z)("debug-breakpoint-log-disabled", 60075),
                briefcase: (0, t.z)("briefcase", 60076),
                broadcast: (0, t.z)("broadcast", 60077),
                browser: (0, t.z)("browser", 60078),
                bug: (0, t.z)("bug", 60079),
                calendar: (0, t.z)("calendar", 60080),
                caseSensitive: (0, t.z)("case-sensitive", 60081),
                check: (0, t.z)("check", 60082),
                checklist: (0, t.z)("checklist", 60083),
                chevronDown: (0, t.z)("chevron-down", 60084),
                chevronLeft: (0, t.z)("chevron-left", 60085),
                chevronRight: (0, t.z)("chevron-right", 60086),
                chevronUp: (0, t.z)("chevron-up", 60087),
                chromeClose: (0, t.z)("chrome-close", 60088),
                chromeMaximize: (0, t.z)("chrome-maximize", 60089),
                chromeMinimize: (0, t.z)("chrome-minimize", 60090),
                chromeRestore: (0, t.z)("chrome-restore", 60091),
                circleOutline: (0, t.z)("circle-outline", 60092),
                circle: (0, t.z)("circle", 60092),
                debugBreakpointUnverified: (0, t.z)("debug-breakpoint-unverified", 60092),
                terminalDecorationIncomplete: (0, t.z)("terminal-decoration-incomplete", 60092),
                circleSlash: (0, t.z)("circle-slash", 60093),
                circuitBoard: (0, t.z)("circuit-board", 60094),
                clearAll: (0, t.z)("clear-all", 60095),
                clippy: (0, t.z)("clippy", 60096),
                closeAll: (0, t.z)("close-all", 60097),
                cloudDownload: (0, t.z)("cloud-download", 60098),
                cloudUpload: (0, t.z)("cloud-upload", 60099),
                code: (0, t.z)("code", 60100),
                collapseAll: (0, t.z)("collapse-all", 60101),
                colorMode: (0, t.z)("color-mode", 60102),
                commentDiscussion: (0, t.z)("comment-discussion", 60103),
                creditCard: (0, t.z)("credit-card", 60105),
                dash: (0, t.z)("dash", 60108),
                dashboard: (0, t.z)("dashboard", 60109),
                database: (0, t.z)("database", 60110),
                debugContinue: (0, t.z)("debug-continue", 60111),
                debugDisconnect: (0, t.z)("debug-disconnect", 60112),
                debugPause: (0, t.z)("debug-pause", 60113),
                debugRestart: (0, t.z)("debug-restart", 60114),
                debugStart: (0, t.z)("debug-start", 60115),
                debugStepInto: (0, t.z)("debug-step-into", 60116),
                debugStepOut: (0, t.z)("debug-step-out", 60117),
                debugStepOver: (0, t.z)("debug-step-over", 60118),
                debugStop: (0, t.z)("debug-stop", 60119),
                debug: (0, t.z)("debug", 60120),
                deviceCameraVideo: (0, t.z)("device-camera-video", 60121),
                deviceCamera: (0, t.z)("device-camera", 60122),
                deviceMobile: (0, t.z)("device-mobile", 60123),
                diffAdded: (0, t.z)("diff-added", 60124),
                diffIgnored: (0, t.z)("diff-ignored", 60125),
                diffModified: (0, t.z)("diff-modified", 60126),
                diffRemoved: (0, t.z)("diff-removed", 60127),
                diffRenamed: (0, t.z)("diff-renamed", 60128),
                diff: (0, t.z)("diff", 60129),
                diffSidebyside: (0, t.z)("diff-sidebyside", 60129),
                discard: (0, t.z)("discard", 60130),
                editorLayout: (0, t.z)("editor-layout", 60131),
                emptyWindow: (0, t.z)("empty-window", 60132),
                exclude: (0, t.z)("exclude", 60133),
                extensions: (0, t.z)("extensions", 60134),
                eyeClosed: (0, t.z)("eye-closed", 60135),
                fileBinary: (0, t.z)("file-binary", 60136),
                fileCode: (0, t.z)("file-code", 60137),
                fileMedia: (0, t.z)("file-media", 60138),
                filePdf: (0, t.z)("file-pdf", 60139),
                fileSubmodule: (0, t.z)("file-submodule", 60140),
                fileSymlinkDirectory: (0, t.z)("file-symlink-directory", 60141),
                fileSymlinkFile: (0, t.z)("file-symlink-file", 60142),
                fileZip: (0, t.z)("file-zip", 60143),
                files: (0, t.z)("files", 60144),
                filter: (0, t.z)("filter", 60145),
                flame: (0, t.z)("flame", 60146),
                foldDown: (0, t.z)("fold-down", 60147),
                foldUp: (0, t.z)("fold-up", 60148),
                fold: (0, t.z)("fold", 60149),
                folderActive: (0, t.z)("folder-active", 60150),
                folderOpened: (0, t.z)("folder-opened", 60151),
                gear: (0, t.z)("gear", 60152),
                gift: (0, t.z)("gift", 60153),
                gistSecret: (0, t.z)("gist-secret", 60154),
                gist: (0, t.z)("gist", 60155),
                gitCommit: (0, t.z)("git-commit", 60156),
                gitCompare: (0, t.z)("git-compare", 60157),
                compareChanges: (0, t.z)("compare-changes", 60157),
                gitMerge: (0, t.z)("git-merge", 60158),
                githubAction: (0, t.z)("github-action", 60159),
                githubAlt: (0, t.z)("github-alt", 60160),
                globe: (0, t.z)("globe", 60161),
                grabber: (0, t.z)("grabber", 60162),
                graph: (0, t.z)("graph", 60163),
                gripper: (0, t.z)("gripper", 60164),
                heart: (0, t.z)("heart", 60165),
                home: (0, t.z)("home", 60166),
                horizontalRule: (0, t.z)("horizontal-rule", 60167),
                hubot: (0, t.z)("hubot", 60168),
                inbox: (0, t.z)("inbox", 60169),
                issueReopened: (0, t.z)("issue-reopened", 60171),
                issues: (0, t.z)("issues", 60172),
                italic: (0, t.z)("italic", 60173),
                jersey: (0, t.z)("jersey", 60174),
                json: (0, t.z)("json", 60175),
                kebabVertical: (0, t.z)("kebab-vertical", 60176),
                key: (0, t.z)("key", 60177),
                law: (0, t.z)("law", 60178),
                lightbulbAutofix: (0, t.z)("lightbulb-autofix", 60179),
                linkExternal: (0, t.z)("link-external", 60180),
                link: (0, t.z)("link", 60181),
                listOrdered: (0, t.z)("list-ordered", 60182),
                listUnordered: (0, t.z)("list-unordered", 60183),
                liveShare: (0, t.z)("live-share", 60184),
                loading: (0, t.z)("loading", 60185),
                location: (0, t.z)("location", 60186),
                mailRead: (0, t.z)("mail-read", 60187),
                mail: (0, t.z)("mail", 60188),
                markdown: (0, t.z)("markdown", 60189),
                megaphone: (0, t.z)("megaphone", 60190),
                mention: (0, t.z)("mention", 60191),
                milestone: (0, t.z)("milestone", 60192),
                gitPullRequestMilestone: (0, t.z)("git-pull-request-milestone", 60192),
                mortarBoard: (0, t.z)("mortar-board", 60193),
                move: (0, t.z)("move", 60194),
                multipleWindows: (0, t.z)("multiple-windows", 60195),
                mute: (0, t.z)("mute", 60196),
                noNewline: (0, t.z)("no-newline", 60197),
                note: (0, t.z)("note", 60198),
                octoface: (0, t.z)("octoface", 60199),
                openPreview: (0, t.z)("open-preview", 60200),
                package: (0, t.z)("package", 60201),
                paintcan: (0, t.z)("paintcan", 60202),
                pin: (0, t.z)("pin", 60203),
                play: (0, t.z)("play", 60204),
                run: (0, t.z)("run", 60204),
                plug: (0, t.z)("plug", 60205),
                preserveCase: (0, t.z)("preserve-case", 60206),
                preview: (0, t.z)("preview", 60207),
                project: (0, t.z)("project", 60208),
                pulse: (0, t.z)("pulse", 60209),
                question: (0, t.z)("question", 60210),
                quote: (0, t.z)("quote", 60211),
                radioTower: (0, t.z)("radio-tower", 60212),
                reactions: (0, t.z)("reactions", 60213),
                references: (0, t.z)("references", 60214),
                refresh: (0, t.z)("refresh", 60215),
                regex: (0, t.z)("regex", 60216),
                remoteExplorer: (0, t.z)("remote-explorer", 60217),
                remote: (0, t.z)("remote", 60218),
                remove: (0, t.z)("remove", 60219),
                replaceAll: (0, t.z)("replace-all", 60220),
                replace: (0, t.z)("replace", 60221),
                repoClone: (0, t.z)("repo-clone", 60222),
                repoForcePush: (0, t.z)("repo-force-push", 60223),
                repoPull: (0, t.z)("repo-pull", 60224),
                repoPush: (0, t.z)("repo-push", 60225),
                report: (0, t.z)("report", 60226),
                requestChanges: (0, t.z)("request-changes", 60227),
                rocket: (0, t.z)("rocket", 60228),
                rootFolderOpened: (0, t.z)("root-folder-opened", 60229),
                rootFolder: (0, t.z)("root-folder", 60230),
                rss: (0, t.z)("rss", 60231),
                ruby: (0, t.z)("ruby", 60232),
                saveAll: (0, t.z)("save-all", 60233),
                saveAs: (0, t.z)("save-as", 60234),
                save: (0, t.z)("save", 60235),
                screenFull: (0, t.z)("screen-full", 60236),
                screenNormal: (0, t.z)("screen-normal", 60237),
                searchStop: (0, t.z)("search-stop", 60238),
                server: (0, t.z)("server", 60240),
                settingsGear: (0, t.z)("settings-gear", 60241),
                settings: (0, t.z)("settings", 60242),
                shield: (0, t.z)("shield", 60243),
                smiley: (0, t.z)("smiley", 60244),
                sortPrecedence: (0, t.z)("sort-precedence", 60245),
                splitHorizontal: (0, t.z)("split-horizontal", 60246),
                splitVertical: (0, t.z)("split-vertical", 60247),
                squirrel: (0, t.z)("squirrel", 60248),
                starFull: (0, t.z)("star-full", 60249),
                starHalf: (0, t.z)("star-half", 60250),
                symbolClass: (0, t.z)("symbol-class", 60251),
                symbolColor: (0, t.z)("symbol-color", 60252),
                symbolConstant: (0, t.z)("symbol-constant", 60253),
                symbolEnumMember: (0, t.z)("symbol-enum-member", 60254),
                symbolField: (0, t.z)("symbol-field", 60255),
                symbolFile: (0, t.z)("symbol-file", 60256),
                symbolInterface: (0, t.z)("symbol-interface", 60257),
                symbolKeyword: (0, t.z)("symbol-keyword", 60258),
                symbolMisc: (0, t.z)("symbol-misc", 60259),
                symbolOperator: (0, t.z)("symbol-operator", 60260),
                symbolProperty: (0, t.z)("symbol-property", 60261),
                wrench: (0, t.z)("wrench", 60261),
                wrenchSubaction: (0, t.z)("wrench-subaction", 60261),
                symbolSnippet: (0, t.z)("symbol-snippet", 60262),
                tasklist: (0, t.z)("tasklist", 60263),
                telescope: (0, t.z)("telescope", 60264),
                textSize: (0, t.z)("text-size", 60265),
                threeBars: (0, t.z)("three-bars", 60266),
                thumbsdown: (0, t.z)("thumbsdown", 60267),
                thumbsup: (0, t.z)("thumbsup", 60268),
                tools: (0, t.z)("tools", 60269),
                triangleDown: (0, t.z)("triangle-down", 60270),
                triangleLeft: (0, t.z)("triangle-left", 60271),
                triangleRight: (0, t.z)("triangle-right", 60272),
                triangleUp: (0, t.z)("triangle-up", 60273),
                twitter: (0, t.z)("twitter", 60274),
                unfold: (0, t.z)("unfold", 60275),
                unlock: (0, t.z)("unlock", 60276),
                unmute: (0, t.z)("unmute", 60277),
                unverified: (0, t.z)("unverified", 60278),
                verified: (0, t.z)("verified", 60279),
                versions: (0, t.z)("versions", 60280),
                vmActive: (0, t.z)("vm-active", 60281),
                vmOutline: (0, t.z)("vm-outline", 60282),
                vmRunning: (0, t.z)("vm-running", 60283),
                watch: (0, t.z)("watch", 60284),
                whitespace: (0, t.z)("whitespace", 60285),
                wholeWord: (0, t.z)("whole-word", 60286),
                window: (0, t.z)("window", 60287),
                wordWrap: (0, t.z)("word-wrap", 60288),
                zoomIn: (0, t.z)("zoom-in", 60289),
                zoomOut: (0, t.z)("zoom-out", 60290),
                listFilter: (0, t.z)("list-filter", 60291),
                listFlat: (0, t.z)("list-flat", 60292),
                listSelection: (0, t.z)("list-selection", 60293),
                selection: (0, t.z)("selection", 60293),
                listTree: (0, t.z)("list-tree", 60294),
                debugBreakpointFunctionUnverified: (0, t.z)("debug-breakpoint-function-unverified", 60295),
                debugBreakpointFunction: (0, t.z)("debug-breakpoint-function", 60296),
                debugBreakpointFunctionDisabled: (0, t.z)("debug-breakpoint-function-disabled", 60296),
                debugStackframeActive: (0, t.z)("debug-stackframe-active", 60297),
                circleSmallFilled: (0, t.z)("circle-small-filled", 60298),
                debugStackframeDot: (0, t.z)("debug-stackframe-dot", 60298),
                terminalDecorationMark: (0, t.z)("terminal-decoration-mark", 60298),
                debugStackframe: (0, t.z)("debug-stackframe", 60299),
                debugStackframeFocused: (0, t.z)("debug-stackframe-focused", 60299),
                debugBreakpointUnsupported: (0, t.z)("debug-breakpoint-unsupported", 60300),
                symbolString: (0, t.z)("symbol-string", 60301),
                debugReverseContinue: (0, t.z)("debug-reverse-continue", 60302),
                debugStepBack: (0, t.z)("debug-step-back", 60303),
                debugRestartFrame: (0, t.z)("debug-restart-frame", 60304),
                debugAlt: (0, t.z)("debug-alt", 60305),
                callIncoming: (0, t.z)("call-incoming", 60306),
                callOutgoing: (0, t.z)("call-outgoing", 60307),
                menu: (0, t.z)("menu", 60308),
                expandAll: (0, t.z)("expand-all", 60309),
                feedback: (0, t.z)("feedback", 60310),
                gitPullRequestReviewer: (0, t.z)("git-pull-request-reviewer", 60310),
                groupByRefType: (0, t.z)("group-by-ref-type", 60311),
                ungroupByRefType: (0, t.z)("ungroup-by-ref-type", 60312),
                account: (0, t.z)("account", 60313),
                gitPullRequestAssignee: (0, t.z)("git-pull-request-assignee", 60313),
                bellDot: (0, t.z)("bell-dot", 60314),
                debugConsole: (0, t.z)("debug-console", 60315),
                library: (0, t.z)("library", 60316),
                output: (0, t.z)("output", 60317),
                runAll: (0, t.z)("run-all", 60318),
                syncIgnored: (0, t.z)("sync-ignored", 60319),
                pinned: (0, t.z)("pinned", 60320),
                githubInverted: (0, t.z)("github-inverted", 60321),
                serverProcess: (0, t.z)("server-process", 60322),
                serverEnvironment: (0, t.z)("server-environment", 60323),
                pass: (0, t.z)("pass", 60324),
                issueClosed: (0, t.z)("issue-closed", 60324),
                stopCircle: (0, t.z)("stop-circle", 60325),
                playCircle: (0, t.z)("play-circle", 60326),
                record: (0, t.z)("record", 60327),
                debugAltSmall: (0, t.z)("debug-alt-small", 60328),
                vmConnect: (0, t.z)("vm-connect", 60329),
                cloud: (0, t.z)("cloud", 60330),
                merge: (0, t.z)("merge", 60331),
                export: (0, t.z)("export", 60332),
                graphLeft: (0, t.z)("graph-left", 60333),
                magnet: (0, t.z)("magnet", 60334),
                notebook: (0, t.z)("notebook", 60335),
                redo: (0, t.z)("redo", 60336),
                checkAll: (0, t.z)("check-all", 60337),
                pinnedDirty: (0, t.z)("pinned-dirty", 60338),
                passFilled: (0, t.z)("pass-filled", 60339),
                circleLargeFilled: (0, t.z)("circle-large-filled", 60340),
                circleLarge: (0, t.z)("circle-large", 60341),
                circleLargeOutline: (0, t.z)("circle-large-outline", 60341),
                combine: (0, t.z)("combine", 60342),
                gather: (0, t.z)("gather", 60342),
                table: (0, t.z)("table", 60343),
                variableGroup: (0, t.z)("variable-group", 60344),
                typeHierarchy: (0, t.z)("type-hierarchy", 60345),
                typeHierarchySub: (0, t.z)("type-hierarchy-sub", 60346),
                typeHierarchySuper: (0, t.z)("type-hierarchy-super", 60347),
                gitPullRequestCreate: (0, t.z)("git-pull-request-create", 60348),
                runAbove: (0, t.z)("run-above", 60349),
                runBelow: (0, t.z)("run-below", 60350),
                notebookTemplate: (0, t.z)("notebook-template", 60351),
                debugRerun: (0, t.z)("debug-rerun", 60352),
                workspaceTrusted: (0, t.z)("workspace-trusted", 60353),
                workspaceUntrusted: (0, t.z)("workspace-untrusted", 60354),
                workspaceUnknown: (0, t.z)("workspace-unknown", 60355),
                terminalCmd: (0, t.z)("terminal-cmd", 60356),
                terminalDebian: (0, t.z)("terminal-debian", 60357),
                terminalLinux: (0, t.z)("terminal-linux", 60358),
                terminalPowershell: (0, t.z)("terminal-powershell", 60359),
                terminalTmux: (0, t.z)("terminal-tmux", 60360),
                terminalUbuntu: (0, t.z)("terminal-ubuntu", 60361),
                terminalBash: (0, t.z)("terminal-bash", 60362),
                arrowSwap: (0, t.z)("arrow-swap", 60363),
                copy: (0, t.z)("copy", 60364),
                personAdd: (0, t.z)("person-add", 60365),
                filterFilled: (0, t.z)("filter-filled", 60366),
                wand: (0, t.z)("wand", 60367),
                debugLineByLine: (0, t.z)("debug-line-by-line", 60368),
                inspect: (0, t.z)("inspect", 60369),
                layers: (0, t.z)("layers", 60370),
                layersDot: (0, t.z)("layers-dot", 60371),
                layersActive: (0, t.z)("layers-active", 60372),
                compass: (0, t.z)("compass", 60373),
                compassDot: (0, t.z)("compass-dot", 60374),
                compassActive: (0, t.z)("compass-active", 60375),
                azure: (0, t.z)("azure", 60376),
                issueDraft: (0, t.z)("issue-draft", 60377),
                gitPullRequestClosed: (0, t.z)("git-pull-request-closed", 60378),
                gitPullRequestDraft: (0, t.z)("git-pull-request-draft", 60379),
                debugAll: (0, t.z)("debug-all", 60380),
                debugCoverage: (0, t.z)("debug-coverage", 60381),
                runErrors: (0, t.z)("run-errors", 60382),
                folderLibrary: (0, t.z)("folder-library", 60383),
                debugContinueSmall: (0, t.z)("debug-continue-small", 60384),
                beakerStop: (0, t.z)("beaker-stop", 60385),
                graphLine: (0, t.z)("graph-line", 60386),
                graphScatter: (0, t.z)("graph-scatter", 60387),
                pieChart: (0, t.z)("pie-chart", 60388),
                bracket: (0, t.z)("bracket", 60175),
                bracketDot: (0, t.z)("bracket-dot", 60389),
                bracketError: (0, t.z)("bracket-error", 60390),
                lockSmall: (0, t.z)("lock-small", 60391),
                azureDevops: (0, t.z)("azure-devops", 60392),
                verifiedFilled: (0, t.z)("verified-filled", 60393),
                newline: (0, t.z)("newline", 60394),
                layout: (0, t.z)("layout", 60395),
                layoutActivitybarLeft: (0, t.z)("layout-activitybar-left", 60396),
                layoutActivitybarRight: (0, t.z)("layout-activitybar-right", 60397),
                layoutPanelLeft: (0, t.z)("layout-panel-left", 60398),
                layoutPanelCenter: (0, t.z)("layout-panel-center", 60399),
                layoutPanelJustify: (0, t.z)("layout-panel-justify", 60400),
                layoutPanelRight: (0, t.z)("layout-panel-right", 60401),
                layoutPanel: (0, t.z)("layout-panel", 60402),
                layoutSidebarLeft: (0, t.z)("layout-sidebar-left", 60403),
                layoutSidebarRight: (0, t.z)("layout-sidebar-right", 60404),
                layoutStatusbar: (0, t.z)("layout-statusbar", 60405),
                layoutMenubar: (0, t.z)("layout-menubar", 60406),
                layoutCentered: (0, t.z)("layout-centered", 60407),
                target: (0, t.z)("target", 60408),
                indent: (0, t.z)("indent", 60409),
                recordSmall: (0, t.z)("record-small", 60410),
                errorSmall: (0, t.z)("error-small", 60411),
                terminalDecorationError: (0, t.z)("terminal-decoration-error", 60411),
                arrowCircleDown: (0, t.z)("arrow-circle-down", 60412),
                arrowCircleLeft: (0, t.z)("arrow-circle-left", 60413),
                arrowCircleRight: (0, t.z)("arrow-circle-right", 60414),
                arrowCircleUp: (0, t.z)("arrow-circle-up", 60415),
                layoutSidebarRightOff: (0, t.z)("layout-sidebar-right-off", 60416),
                layoutPanelOff: (0, t.z)("layout-panel-off", 60417),
                layoutSidebarLeftOff: (0, t.z)("layout-sidebar-left-off", 60418),
                blank: (0, t.z)("blank", 60419),
                heartFilled: (0, t.z)("heart-filled", 60420),
                map: (0, t.z)("map", 60421),
                mapHorizontal: (0, t.z)("map-horizontal", 60421),
                foldHorizontal: (0, t.z)("fold-horizontal", 60421),
                mapFilled: (0, t.z)("map-filled", 60422),
                mapHorizontalFilled: (0, t.z)("map-horizontal-filled", 60422),
                foldHorizontalFilled: (0, t.z)("fold-horizontal-filled", 60422),
                circleSmall: (0, t.z)("circle-small", 60423),
                bellSlash: (0, t.z)("bell-slash", 60424),
                bellSlashDot: (0, t.z)("bell-slash-dot", 60425),
                commentUnresolved: (0, t.z)("comment-unresolved", 60426),
                gitPullRequestGoToChanges: (0, t.z)("git-pull-request-go-to-changes", 60427),
                gitPullRequestNewChanges: (0, t.z)("git-pull-request-new-changes", 60428),
                searchFuzzy: (0, t.z)("search-fuzzy", 60429),
                commentDraft: (0, t.z)("comment-draft", 60430),
                send: (0, t.z)("send", 60431),
                sparkle: (0, t.z)("sparkle", 60432),
                insert: (0, t.z)("insert", 60433),
                mic: (0, t.z)("mic", 60434),
                thumbsdownFilled: (0, t.z)("thumbsdown-filled", 60435),
                thumbsupFilled: (0, t.z)("thumbsup-filled", 60436),
                coffee: (0, t.z)("coffee", 60437),
                snake: (0, t.z)("snake", 60438),
                game: (0, t.z)("game", 60439),
                vr: (0, t.z)("vr", 60440),
                chip: (0, t.z)("chip", 60441),
                piano: (0, t.z)("piano", 60442),
                music: (0, t.z)("music", 60443),
                micFilled: (0, t.z)("mic-filled", 60444),
                repoFetch: (0, t.z)("repo-fetch", 60445),
                copilot: (0, t.z)("copilot", 60446),
                lightbulbSparkle: (0, t.z)("lightbulb-sparkle", 60447),
                robot: (0, t.z)("robot", 60448),
                sparkleFilled: (0, t.z)("sparkle-filled", 60449),
                diffSingle: (0, t.z)("diff-single", 60450),
                diffMultiple: (0, t.z)("diff-multiple", 60451),
                surroundWith: (0, t.z)("surround-with", 60452),
                share: (0, t.z)("share", 60453),
                gitStash: (0, t.z)("git-stash", 60454),
                gitStashApply: (0, t.z)("git-stash-apply", 60455),
                gitStashPop: (0, t.z)("git-stash-pop", 60456),
                vscode: (0, t.z)("vscode", 60457),
                vscodeInsiders: (0, t.z)("vscode-insiders", 60458),
                codeOss: (0, t.z)("code-oss", 60459),
                runCoverage: (0, t.z)("run-coverage", 60460),
                runAllCoverage: (0, t.z)("run-all-coverage", 60461),
                coverage: (0, t.z)("coverage", 60462),
                githubProject: (0, t.z)("github-project", 60463),
                mapVertical: (0, t.z)("map-vertical", 60464),
                foldVertical: (0, t.z)("fold-vertical", 60464),
                mapVerticalFilled: (0, t.z)("map-vertical-filled", 60465),
                foldVerticalFilled: (0, t.z)("fold-vertical-filled", 60465),
                goToSearch: (0, t.z)("go-to-search", 60466),
                percentage: (0, t.z)("percentage", 60467),
                sortPercentage: (0, t.z)("sort-percentage", 60467),
                attach: (0, t.z)("attach", 60468)
            }
        },
        G9Uv: (e, i, n) => {
            function t(e, i) {
                const n = this;
                let t, r = !1;
                return function() {
                    if (r) return t;
                    if (r = !0, i) try {
                        t = e.apply(n, arguments)
                    } finally {
                        i()
                    } else t = e.apply(n, arguments);
                    return t
                }
            }
            n.d(i, {
                M: () => t
            })
        },
        wBFb: (e, i, n) => {
            var t;
            n.d(i, {
                    $: () => t
                }),
                function(e) {
                    function i(e) {
                        return e && "object" == typeof e && "function" == typeof e[Symbol.iterator]
                    }
                    e.is = i;
                    const n = Object.freeze([]);

                    function* t(e) {
                        yield e
                    }
                    e.empty = function() {
                        return n
                    }, e.single = t, e.wrap = function(e) {
                        return i(e) ? e : t(e)
                    }, e.from = function(e) {
                        return e || n
                    }, e.reverse = function*(e) {
                        for (let i = e.length - 1; i >= 0; i--) yield e[i]
                    }, e.isEmpty = function(e) {
                        return !e || !0 === e[Symbol.iterator]().next().done
                    }, e.first = function(e) {
                        return e[Symbol.iterator]().next().value
                    }, e.some = function(e, i) {
                        let n = 0;
                        for (const t of e)
                            if (i(t, n++)) return !0;
                        return !1
                    }, e.find = function(e, i) {
                        for (const n of e)
                            if (i(n)) return n
                    }, e.filter = function*(e, i) {
                        for (const n of e) i(n) && (yield n)
                    }, e.map = function*(e, i) {
                        let n = 0;
                        for (const t of e) yield i(t, n++)
                    }, e.flatMap = function*(e, i) {
                        let n = 0;
                        for (const t of e) yield* i(t, n++)
                    }, e.concat = function*(...e) {
                        for (const i of e) yield* i
                    }, e.reduce = function(e, i, n) {
                        let t = n;
                        for (const n of e) t = i(t, n);
                        return t
                    }, e.slice = function*(e, i, n = e.length) {
                        for (i < 0 && (i += e.length), n < 0 ? n += e.length : n > e.length && (n = e.length); i < n; i++) yield e[i]
                    }, e.consume = function(i, n = Number.POSITIVE_INFINITY) {
                        const t = [];
                        if (0 === n) return [t, i];
                        const r = i[Symbol.iterator]();
                        for (let i = 0; i < n; i++) {
                            const i = r.next();
                            if (i.done) return [t, e.empty()];
                            t.push(i.value)
                        }
                        return [t, {
                            [Symbol.iterator]: () => r
                        }]
                    }, e.asyncToArray = async function(e) {
                        const i = [];
                        for await (const n of e) i.push(n);
                        return Promise.resolve(i)
                    }
                }(t || (t = {}))
        },
        "8HR7": (e, i, n) => {
            n.d(i, {
                o: () => t
            });
            class t {
                constructor(e) {
                    this.executor = e, this._didRun = !1
                }
                get hasValue() {
                    return this._didRun
                }
                get value() {
                    if (!this._didRun) try {
                        this._value = this.executor()
                    } catch (e) {
                        this._error = e
                    } finally {
                        this._didRun = !0
                    }
                    if (this._error) throw this._error;
                    return this._value
                }
                get rawValue() {
                    return this._value
                }
            }
        },
        "6PFX": (e, i, n) => {
            n.d(i, {
                L: () => t
            });
            class t {
                constructor(e, i) {
                    this.lineNumber = e, this.column = i
                }
                with(e = this.lineNumber, i = this.column) {
                    return e === this.lineNumber && i === this.column ? this : new t(e, i)
                }
                delta(e = 0, i = 0) {
                    return this.with(this.lineNumber + e, this.column + i)
                }
                equals(e) {
                    return t.equals(this, e)
                }
                static equals(e, i) {
                    return !e && !i || !!e && !!i && e.lineNumber === i.lineNumber && e.column === i.column
                }
                isBefore(e) {
                    return t.isBefore(this, e)
                }
                static isBefore(e, i) {
                    return e.lineNumber < i.lineNumber || !(i.lineNumber < e.lineNumber) && e.column < i.column
                }
                isBeforeOrEqual(e) {
                    return t.isBeforeOrEqual(this, e)
                }
                static isBeforeOrEqual(e, i) {
                    return e.lineNumber < i.lineNumber || !(i.lineNumber < e.lineNumber) && e.column <= i.column
                }
                static compare(e, i) {
                    const n = 0 | e.lineNumber,
                        t = 0 | i.lineNumber;
                    return n === t ? (0 | e.column) - (0 | i.column) : n - t
                }
                clone() {
                    return new t(this.lineNumber, this.column)
                }
                toString() {
                    return "(" + this.lineNumber + "," + this.column + ")"
                }
                static lift(e) {
                    return new t(e.lineNumber, e.column)
                }
                static isIPosition(e) {
                    return e && "number" == typeof e.lineNumber && "number" == typeof e.column
                }
                toJSON() {
                    return {
                        lineNumber: this.lineNumber,
                        column: this.column
                    }
                }
            }
        },
        Aw1u: (e, i, n) => {
            n.d(i, {
                e: () => r
            });
            var t = n("6PFX");
            class r {
                constructor(e, i, n, t) {
                    e > n || e === n && i > t ? (this.startLineNumber = n, this.startColumn = t, this.endLineNumber = e, this.endColumn = i) : (this.startLineNumber = e, this.startColumn = i, this.endLineNumber = n, this.endColumn = t)
                }
                isEmpty() {
                    return r.isEmpty(this)
                }
                static isEmpty(e) {
                    return e.startLineNumber === e.endLineNumber && e.startColumn === e.endColumn
                }
                containsPosition(e) {
                    return r.containsPosition(this, e)
                }
                static containsPosition(e, i) {
                    return !(i.lineNumber < e.startLineNumber || i.lineNumber > e.endLineNumber || i.lineNumber === e.startLineNumber && i.column < e.startColumn || i.lineNumber === e.endLineNumber && i.column > e.endColumn)
                }
                static strictContainsPosition(e, i) {
                    return !(i.lineNumber < e.startLineNumber || i.lineNumber > e.endLineNumber || i.lineNumber === e.startLineNumber && i.column <= e.startColumn || i.lineNumber === e.endLineNumber && i.column >= e.endColumn)
                }
                containsRange(e) {
                    return r.containsRange(this, e)
                }
                static containsRange(e, i) {
                    return !(i.startLineNumber < e.startLineNumber || i.endLineNumber < e.startLineNumber || i.startLineNumber > e.endLineNumber || i.endLineNumber > e.endLineNumber || i.startLineNumber === e.startLineNumber && i.startColumn < e.startColumn || i.endLineNumber === e.endLineNumber && i.endColumn > e.endColumn)
                }
                strictContainsRange(e) {
                    return r.strictContainsRange(this, e)
                }
                static strictContainsRange(e, i) {
                    return !(i.startLineNumber < e.startLineNumber || i.endLineNumber < e.startLineNumber || i.startLineNumber > e.endLineNumber || i.endLineNumber > e.endLineNumber || i.startLineNumber === e.startLineNumber && i.startColumn <= e.startColumn || i.endLineNumber === e.endLineNumber && i.endColumn >= e.endColumn)
                }
                plusRange(e) {
                    return r.plusRange(this, e)
                }
                static plusRange(e, i) {
                    let n, t, o, l;
                    return i.startLineNumber < e.startLineNumber ? (n = i.startLineNumber, t = i.startColumn) : i.startLineNumber === e.startLineNumber ? (n = i.startLineNumber, t = Math.min(i.startColumn, e.startColumn)) : (n = e.startLineNumber, t = e.startColumn), i.endLineNumber > e.endLineNumber ? (o = i.endLineNumber, l = i.endColumn) : i.endLineNumber === e.endLineNumber ? (o = i.endLineNumber, l = Math.max(i.endColumn, e.endColumn)) : (o = e.endLineNumber, l = e.endColumn), new r(n, t, o, l)
                }
                intersectRanges(e) {
                    return r.intersectRanges(this, e)
                }
                static intersectRanges(e, i) {
                    let n = e.startLineNumber,
                        t = e.startColumn,
                        o = e.endLineNumber,
                        l = e.endColumn;
                    const _ = i.startLineNumber,
                        a = i.startColumn,
                        s = i.endLineNumber,
                        u = i.endColumn;
                    return n < _ ? (n = _, t = a) : n === _ && (t = Math.max(t, a)), o > s ? (o = s, l = u) : o === s && (l = Math.min(l, u)), n > o || n === o && t > l ? null : new r(n, t, o, l)
                }
                equalsRange(e) {
                    return r.equalsRange(this, e)
                }
                static equalsRange(e, i) {
                    return !e && !i || !!e && !!i && e.startLineNumber === i.startLineNumber && e.startColumn === i.startColumn && e.endLineNumber === i.endLineNumber && e.endColumn === i.endColumn
                }
                getEndPosition() {
                    return r.getEndPosition(this)
                }
                static getEndPosition(e) {
                    return new t.L(e.endLineNumber, e.endColumn)
                }
                getStartPosition() {
                    return r.getStartPosition(this)
                }
                static getStartPosition(e) {
                    return new t.L(e.startLineNumber, e.startColumn)
                }
                toString() {
                    return "[" + this.startLineNumber + "," + this.startColumn + " -> " + this.endLineNumber + "," + this.endColumn + "]"
                }
                setEndPosition(e, i) {
                    return new r(this.startLineNumber, this.startColumn, e, i)
                }
                setStartPosition(e, i) {
                    return new r(e, i, this.endLineNumber, this.endColumn)
                }
                collapseToStart() {
                    return r.collapseToStart(this)
                }
                static collapseToStart(e) {
                    return new r(e.startLineNumber, e.startColumn, e.startLineNumber, e.startColumn)
                }
                collapseToEnd() {
                    return r.collapseToEnd(this)
                }
                static collapseToEnd(e) {
                    return new r(e.endLineNumber, e.endColumn, e.endLineNumber, e.endColumn)
                }
                delta(e) {
                    return new r(this.startLineNumber + e, this.startColumn, this.endLineNumber + e, this.endColumn)
                }
                static fromPositions(e, i = e) {
                    return new r(e.lineNumber, e.column, i.lineNumber, i.column)
                }
                static lift(e) {
                    return e ? new r(e.startLineNumber, e.startColumn, e.endLineNumber, e.endColumn) : null
                }
                static isIRange(e) {
                    return e && "number" == typeof e.startLineNumber && "number" == typeof e.startColumn && "number" == typeof e.endLineNumber && "number" == typeof e.endColumn
                }
                static areIntersectingOrTouching(e, i) {
                    return !(e.endLineNumber < i.startLineNumber || e.endLineNumber === i.startLineNumber && e.endColumn < i.startColumn || i.endLineNumber < e.startLineNumber || i.endLineNumber === e.startLineNumber && i.endColumn < e.startColumn)
                }
                static areIntersecting(e, i) {
                    return !(e.endLineNumber < i.startLineNumber || e.endLineNumber === i.startLineNumber && e.endColumn <= i.startColumn || i.endLineNumber < e.startLineNumber || i.endLineNumber === e.startLineNumber && i.endColumn <= e.startColumn)
                }
                static compareRangesUsingStarts(e, i) {
                    if (e && i) {
                        const n = 0 | e.startLineNumber,
                            t = 0 | i.startLineNumber;
                        if (n === t) {
                            const n = 0 | e.startColumn,
                                t = 0 | i.startColumn;
                            if (n === t) {
                                const n = 0 | e.endLineNumber,
                                    t = 0 | i.endLineNumber;
                                return n === t ? (0 | e.endColumn) - (0 | i.endColumn) : n - t
                            }
                            return n - t
                        }
                        return n - t
                    }
                    return (e ? 1 : 0) - (i ? 1 : 0)
                }
                static compareRangesUsingEnds(e, i) {
                    return e.endLineNumber === i.endLineNumber ? e.endColumn === i.endColumn ? e.startLineNumber === i.startLineNumber ? e.startColumn - i.startColumn : e.startLineNumber - i.startLineNumber : e.endColumn - i.endColumn : e.endLineNumber - i.endLineNumber
                }
                static spansMultipleLines(e) {
                    return e.endLineNumber > e.startLineNumber
                }
                toJSON() {
                    return this
                }
            }
        },
        zr1e: (e, i, n) => {
            n.d(i, {
                v: () => l
            });
            var t = n("p044"),
                r = n("6PFX"),
                o = n("L+r9");
            class l {
                constructor(e, i, n, t) {
                    this._uri = e, this._lines = i, this._eol = n, this._versionId = t, this._lineStarts = null, this._cachedTextValue = null
                }
                dispose() {
                    this._lines.length = 0
                }
                get version() {
                    return this._versionId
                }
                getText() {
                    return null === this._cachedTextValue && (this._cachedTextValue = this._lines.join(this._eol)), this._cachedTextValue
                }
                onEvents(e) {
                    e.eol && e.eol !== this._eol && (this._eol = e.eol, this._lineStarts = null);
                    const i = e.changes;
                    for (const e of i) this._acceptDeleteRange(e.range), this._acceptInsertText(new r.L(e.range.startLineNumber, e.range.startColumn), e.text);
                    this._versionId = e.versionId, this._cachedTextValue = null
                }
                _ensureLineStarts() {
                    if (!this._lineStarts) {
                        const e = this._eol.length,
                            i = this._lines.length,
                            n = new Uint32Array(i);
                        for (let t = 0; t < i; t++) n[t] = this._lines[t].length + e;
                        this._lineStarts = new o.oQ(n)
                    }
                }
                _setLineText(e, i) {
                    this._lines[e] = i, this._lineStarts && this._lineStarts.setValue(e, this._lines[e].length + this._eol.length)
                }
                _acceptDeleteRange(e) {
                    if (e.startLineNumber !== e.endLineNumber) this._setLineText(e.startLineNumber - 1, this._lines[e.startLineNumber - 1].substring(0, e.startColumn - 1) + this._lines[e.endLineNumber - 1].substring(e.endColumn - 1)), this._lines.splice(e.startLineNumber, e.endLineNumber - e.startLineNumber), this._lineStarts && this._lineStarts.removeValues(e.startLineNumber, e.endLineNumber - e.startLineNumber);
                    else {
                        if (e.startColumn === e.endColumn) return;
                        this._setLineText(e.startLineNumber - 1, this._lines[e.startLineNumber - 1].substring(0, e.startColumn - 1) + this._lines[e.startLineNumber - 1].substring(e.endColumn - 1))
                    }
                }
                _acceptInsertText(e, i) {
                    if (0 === i.length) return;
                    const n = (0, t.uq)(i);
                    if (1 === n.length) return void this._setLineText(e.lineNumber - 1, this._lines[e.lineNumber - 1].substring(0, e.column - 1) + n[0] + this._lines[e.lineNumber - 1].substring(e.column - 1));
                    n[n.length - 1] += this._lines[e.lineNumber - 1].substring(e.column - 1), this._setLineText(e.lineNumber - 1, this._lines[e.lineNumber - 1].substring(0, e.column - 1) + n[0]);
                    const r = new Uint32Array(n.length - 1);
                    for (let i = 1; i < n.length; i++) this._lines.splice(e.lineNumber + i - 1, 0, n[i]), r[i - 1] = n[i].length + this._eol.length;
                    this._lineStarts && this._lineStarts.insertValues(e.lineNumber, r)
                }
            }
        },
        GLUD: (e, i, n) => {
            n.d(i, {
                R: () => l
            });
            var t = n("7icl"),
                r = n("RVdl"),
                o = n("6ksn");
            class l {
                constructor() {
                    this._tokenizationSupports = new Map, this._factories = new Map, this._onDidChange = new t.Q5, this.onDidChange = this._onDidChange.event, this._colorMap = null
                }
                handleChange(e) {
                    this._onDidChange.fire({
                        changedLanguages: e,
                        changedColorMap: !1
                    })
                }
                register(e, i) {
                    return this._tokenizationSupports.set(e, i), this.handleChange([e]), (0, r.OF)((() => {
                        this._tokenizationSupports.get(e) === i && (this._tokenizationSupports.delete(e), this.handleChange([e]))
                    }))
                }
                get(e) {
                    return this._tokenizationSupports.get(e) || null
                }
                registerFactory(e, i) {
                    this._factories.get(e) ? .dispose();
                    const n = new _(this, e, i);
                    return this._factories.set(e, n), (0, r.OF)((() => {
                        const i = this._factories.get(e);
                        i && i === n && (this._factories.delete(e), i.dispose())
                    }))
                }
                async getOrCreate(e) {
                    const i = this.get(e);
                    if (i) return i;
                    const n = this._factories.get(e);
                    return !n || n.isResolved ? null : (await n.resolve(), this.get(e))
                }
                isResolved(e) {
                    if (this.get(e)) return !0;
                    const i = this._factories.get(e);
                    return !(i && !i.isResolved)
                }
                setColorMap(e) {
                    this._colorMap = e, this._onDidChange.fire({
                        changedLanguages: Array.from(this._tokenizationSupports.keys()),
                        changedColorMap: !0
                    })
                }
                getColorMap() {
                    return this._colorMap
                }
                getDefaultBackground() {
                    return this._colorMap && this._colorMap.length > o.$.DefaultBackground ? this._colorMap[o.$.DefaultBackground] : null
                }
            }
            class _ extends r.JT {
                get isResolved() {
                    return this._isResolved
                }
                constructor(e, i, n) {
                    super(), this._registry = e, this._languageId = i, this._factory = n, this._isDisposed = !1, this._resolvePromise = null, this._isResolved = !1
                }
                dispose() {
                    this._isDisposed = !0, super.dispose()
                }
                async resolve() {
                    return this._resolvePromise || (this._resolvePromise = this._create()), this._resolvePromise
                }
                async _create() {
                    const e = await this._factory.tokenizationSupport;
                    this._isResolved = !0, e && !this._isDisposed && this._register(this._registry.register(this._languageId, e))
                }
            }
        }
    }
]);
//# sourceMappingURL=https://hrcdn.net/fcore/assets/sourcemaps/defaultVendors-node_modules_vscode_vscode_src_vs_base_common_charCode_js-node_modules_vscode_-cb7d75-65169a85.js.map