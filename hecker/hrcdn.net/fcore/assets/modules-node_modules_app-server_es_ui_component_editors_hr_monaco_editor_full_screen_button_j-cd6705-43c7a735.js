"use strict";
(self.webpackChunkhackerrank_lib = self.webpackChunkhackerrank_lib || []).push([
    ["modules-node_modules_app-server_es_ui_component_editors_hr_monaco_editor_full_screen_button_j-cd6705"], {
        "+Fuw": (e, t, a) => {
            a.d(t, {
                If: () => h,
                Wk: () => d
            });
            var l = a("+9dH"),
                o = a("PRvr"),
                r = a("DTvD"),
                i = a.n(r),
                n = a("vN+2"),
                c = a.n(n),
                s = ["theme", "changeTheme"],
                m = (0, r.createContext)({
                    isFullBtnHighlighted: !1,
                    isChangeThemeBtnHighlighted: !1,
                    theme: "light",
                    changeTheme: c()
                }),
                d = m.Provider,
                p = m.Consumer;

            function h(e) {
                return function(t) {
                    return i().createElement(p, null, (a => {
                        var {
                            theme: r = "light",
                            changeTheme: n = c()
                        } = a, m = (0, o.Z)(a, s);
                        return i().createElement(e, (0, l.Z)({
                            darkModeTourData: m,
                            theme: r,
                            changeTheme: n
                        }, t))
                    }))
                }
            }
        },
        VD8A: (e, t, a) => {
            a.d(t, {
                O7: () => c,
                hy: () => r,
                Bw: () => i,
                Zn: () => n
            }), a("fA63");
            var l = a("B2u/"),
                o = {
                    cpp: "codemirror/mode/clike/clike",
                    cpp14: "codemirror/mode/clike/clike",
                    cpp20: "codemirror/mode/clike/clike",
                    cpp23: "codemirror/mode/clike/clike",
                    c: "codemirror/mode/clike/clike",
                    dart: "codemirror/mode/dart/dart",
                    java: "codemirror/mode/clike/clike",
                    csharp: "codemirror/mode/clike/clike",
                    scala: "codemirror/mode/clike/clike",
                    sbcl: "codemirror/mode/commonlisp/commonlisp",
                    ocaml: "codemirror/mode/mllike/mllike",
                    fsharp: "codemirror/mode/mllike/mllike",
                    visualbasic: "codemirror/mode/vb/vb",
                    sql: "codemirror/mode/sql/sql",
                    mysql: "codemirror/mode/sql/sql",
                    tsql: "codemirror/mode/sql/sql",
                    pgsql: "codemirror/mode/sql/sql",
                    oracle: "codemirror/mode/sql/sql",
                    html: ["codemirror/mode/xml/xml", "codemirror/mode/css/css", "codemirror/mode/javascript/javascript", "codemirror/mode/htmlmixed/htmlmixed"],
                    php: ["codemirror/mode/clike/clike", "codemirror/mode/php/php"],
                    python3: "codemirror/mode/python/python",
                    java8: "codemirror/mode/clike/clike",
                    java15: "codemirror/mode/clike/clike",
                    java17: "codemirror/mode/clike/clike",
                    java21: "codemirror/mode/clike/clike",
                    kotlin: "codemirror/mode/clike/clike",
                    db2: "codemirror/mode/sql/sql",
                    bash: "codemirror/mode/shell/shell",
                    objectivec: "codemirror/mode/clike/clike",
                    lolcode: [],
                    whitespace: [],
                    text_pseudo: [],
                    code: "codemirror/mode/clike/clike",
                    text: [],
                    racket: "codemirror/mode/scheme/scheme",
                    coffeescript: "codemirror/mode/coffeescript/coffeescript",
                    typescript: "codemirror/mode/javascript/javascript",
                    elixir: "lib/codemirror_mode_elixir",
                    pypy: "codemirror/mode/python/python",
                    pypy3: "codemirror/mode/python/python",
                    verilog: "codemirror/mode/verilog/verilog"
                },
                r = Object.freeze({
                    c: "C",
                    cpp: "C++",
                    java: "Java 7",
                    csharp: "C#",
                    haskell: "Haskell",
                    php: "PHP",
                    python: "Python 2",
                    ruby: "Ruby",
                    perl: "Perl",
                    bash: "BASH",
                    clojure: "Clojure",
                    scala: "Scala",
                    code: "Generic",
                    text: "Plain Text",
                    brainfuck: "Brainfuck",
                    javascript: "Javascript",
                    typescript: "Typescript",
                    lua: "Lua",
                    sbcl: "Common Lisp (SBCL)",
                    erlang: "Erlang",
                    go: "Go",
                    d: "D",
                    dart: "Dart",
                    ocaml: "OCaml",
                    pascal: "Pascal",
                    python3: "Python 3",
                    groovy: "Groovy",
                    objectivec: "Objective-C",
                    text_pseudo: "Plain Text",
                    fsharp: "F#",
                    visualbasic: "VB.NET",
                    lolcode: "LOLCODE",
                    smalltalk: "Smalltalk",
                    tcl: "Tcl",
                    whitespace: "Whitespace",
                    html: "HTML",
                    css: "CSS",
                    java8: "Java 8",
                    java21: "Java 21",
                    java17: "Java 17",
                    java15: "Java 15",
                    kotlin: "Kotlin",
                    octave: "Octave",
                    r: "R",
                    xquery: "XQuery",
                    racket: "Racket",
                    cobol: "Cobol",
                    xml: "XML",
                    rust: "Rust",
                    fortran: "Fortran",
                    swift: "Swift",
                    oracle: "Oracle",
                    tsql: "MS SQL",
                    db2: "DB2",
                    mysql: "MySQL",
                    sql: "SQL",
                    ada: "ADA",
                    cpp14: "C++14",
                    cpp20: "C++20",
                    cpp23: "C++23",
                    coffeescript: "Coffeescript",
                    elixir: "Elixir",
                    pypy: "PyPy",
                    pypy3: "PyPy3",
                    julia: "Julia",
                    verilog: "Verilog",
                    postgresql: "PostgreSQL"
                }),
                i = {
                    c: "text/x-csrc",
                    cpp: "text/x-c++src",
                    java: "text/x-java",
                    csharp: "text/x-csharp",
                    haskell: "text/x-haskell",
                    php: "text/x-php",
                    python: "text/x-python",
                    perl: "text/x-perl",
                    ruby: "text/x-ruby",
                    bash: "text/x-sh",
                    clojure: "text/x-clojure",
                    scala: "text/x-scala",
                    code: "text/plain",
                    text: "text/plain",
                    brainfuck: "text/x-brainfuck",
                    javascript: "text/javascript",
                    typescript: "text/typescript",
                    d: "text/x-d",
                    dart: "text/x-dart",
                    go: "text/x-go",
                    lua: "text/x-lua",
                    erlang: "text/x-erlang",
                    sbcl: "text/x-common-lisp",
                    ocaml: "text/x-ocaml",
                    pascal: "text/x-pascal",
                    python3: "text/x-python",
                    groovy: "text/x-groovy",
                    text_pseudo: "text/plain",
                    objectivec: "text/x-objectivec",
                    fsharp: "text/x-fsharp",
                    visualbasic: "text/x-vb",
                    smalltalk: "text/x-stsrc",
                    tcl: "text/x-tcl",
                    html: "text/html",
                    css: "text/css",
                    java8: "text/x-java",
                    java21: "text/x-java",
                    java17: "text/x-java",
                    java15: "text/x-java",
                    kotlin: "text/x-kotlin",
                    octave: "text/x-octave",
                    r: "text/x-rsrc",
                    xquery: "application/xquery",
                    racket: "text/x-scheme",
                    cobol: "text/x-cobol",
                    xml: "text/xml",
                    rust: "text/x-rustsrc",
                    swift: "text/x-swift",
                    oracle: "text/x-plsql",
                    tsql: "text/x-plsql",
                    db2: "text/x-plsql",
                    mysql: "text/x-plsql",
                    fortran: "text/x-fortran",
                    sql: "text/x-plsql",
                    ada: "text/ada",
                    cpp14: "text/x-c++src",
                    cpp20: "text/x-c++src",
                    cpp23: "text/x-c++src",
                    coffeescript: "text/x-coffeescript",
                    elixir: "text/x-elixir",
                    pypy: "text/x-python",
                    pypy3: "text/x-python",
                    julia: "text/x-julia",
                    verilog: "text/x-verilog"
                };

            function n(e, t) {
                var a = o[e] || "codemirror/mode/".concat(e, "/").concat(e);
                return "string" == typeof a && (a = [a]), a = a.map((e => t("".concat(e, ".js")))), (0, l.yu)(...a)
            }

            function c(e) {
                var t = {
                    lang_head_template: {},
                    lang_template: {},
                    lang_tail_template: {},
                    lang_head_offset: {},
                    hasHiddenSkeletonPresent: !0
                };
                return e.languages.forEach((a => {
                    var l = "".concat(a, "_template"),
                        o = "".concat(a, "_skeliton_head"),
                        r = "".concat(a, "_skeliton_tail"),
                        i = "".concat(a, "_template_head"),
                        n = "".concat(a, "_template_tail"),
                        c = !(!e[o] && !e[r]);
                    t.lang_head_template[a] = (e[o] || "").trimRight(), t.lang_tail_template[a] = e[r] || "", c && (t.hasHiddenSkeletonPresent = !1), e[l] ? t.lang_template[a] = e[l].trimRight() : c && (t.lang_template[a] = ""), c || !e[i] && !e[n] || (t.lang_template[a] = "".concat((e[i] || "").trimRight(), "\n\n").concat((e[l] || "").trimRight(), "\n\n").concat(e[n] || ""))
                })), e.show_skeliton ? (t.showTemplate = !0, t.showNonEditableHeadTail = !0, t.hasHiddenSkeletonPresent = !0) : (t.showTemplate = !1, t.showNonEditableHeadTail = !1), t
            }
        },
        WRu8: (e, t, a) => {
            a.d(t, {
                Z: () => v
            });
            var l = a("L5+t"),
                o = a("DTvD"),
                r = a.n(o),
                i = a("17x9"),
                n = a.n(i),
                c = a("TSYQ"),
                s = a.n(c),
                m = a("+XdK"),
                d = a("CmRW"),
                p = a("yLnG"),
                h = a("HLVo"),
                u = a("5F93"),
                g = a("+Fuw");
            class x extends r().Component {
                constructor(e) {
                    super(e), (0, l.Z)(this, "iconWrapperRef", r().createRef()), (0, l.Z)(this, "toggleFullscreen", (() => {
                        var {
                            isFullScreen: e
                        } = this.state;
                        this.setState({
                            isFullScreen: !e
                        }), this.props.onToggleFullscreen(!e), e && this.props.onRestoreFullScreen()
                    })), this.state = {
                        isFullScreen: e.isFullScreen
                    }
                }
                componentDidUpdate() {
                    var {
                        isFullBtnHighlighted: e
                    } = this.props.darkModeTourData;
                    if (e && this.iconWrapperRef.current) {
                        var t = new Event("focus");
                        this.iconWrapperRef.current.dispatchEvent(t)
                    }
                }
                render() {
                    var {
                        isFullBtnHighlighted: e
                    } = this.props.darkModeTourData, {
                        isFullScreen: t
                    } = this.state, a = "".concat(t ? "restorefullscreen" : "fullscreen", " fullscreen-btn no-select active-link hr-monaco-base-btn"), l = "".concat(t ? "minimize-icon" : "maximize-icon", " icon-grey no-select"), o = t ? p.Z : h.Z, i = "Switch to ".concat(t ? "Normal" : "Full Screen", " layout"), n = r().createElement("p", {
                        className: "tooltip-content"
                    }, e ? r().createElement("span", null, "To view the full Dark Mode experience,", r().createElement("br", null), "please go to", r().createElement("strong", null, " Full Screen "), "by clicking here.") : i);
                    return r().createElement("div", {
                        className: "fullscreen-btn-wrapper"
                    }, r().createElement(m.ZP, {
                        content: n,
                        aliveTime: e ? 1e3 : 200,
                        align: t ? "bottom-right" : "top-right",
                        className: "fullscreen-tooltip"
                    }, r().createElement("div", {
                        "data-automation": "icon-wrapper",
                        ref: this.iconWrapperRef
                    }, r().createElement(d.ZP, {
                        className: a,
                        title: i,
                        "data-original-title": i,
                        onClick: this.toggleFullscreen
                    }, r().createElement(o, {
                        className: s()(l, {
                            "highlighted-icon": e
                        })
                    })))))
                }
            }(0, l.Z)(x, "propTypes", {
                onToggleFullscreen: n().func,
                isFullScreen: n().bool,
                onRestoreFullScreen: n().func
            }), (0, l.Z)(x, "defaultProps", {
                onToggleFullscreen: u.ZT,
                onRestoreFullScreen: u.ZT,
                isFullScreen: !1
            });
            const v = (0, g.If)(x)
        },
        ILz0: (e, t, a) => {
            a.d(t, {
                Z: () => m
            });
            var l = a("L5+t"),
                o = a("DTvD"),
                r = a.n(o),
                i = a("5F93"),
                n = a("PClM"),
                c = a("CmRW"),
                s = a("F1Pe");
            class m extends r().Component {
                constructor(e) {
                    super(e), (0, l.Z)(this, "props", void 0), (0, l.Z)(this, "state", void 0), (0, l.Z)(this, "onClick", (() => {
                        this.setState({
                            showConfirmDialog: !0
                        })
                    })), (0, l.Z)(this, "onResetConfirm", (() => {
                        var {
                            resetCode: e
                        } = this.props;
                        e(), this.onResetConfirmClose()
                    })), (0, l.Z)(this, "onResetConfirmClose", (() => {
                        this.setState({
                            showConfirmDialog: !1
                        })
                    })), this.state = {
                        showConfirmDialog: !1
                    }
                }
                renderConfirmDialog() {
                    return r().createElement(n.Z, {
                        theme: "theme-m",
                        title: "Attention: Reset Code",
                        className: "codeeditor-modal",
                        open: !0,
                        onConfirm: this.onResetConfirm,
                        onCancel: this.onResetConfirmClose,
                        onClose: this.onResetConfirmClose
                    }, r().createElement("p", null, "This will reset the code in the editor to the original problem statement. Would you like to continue?"), r().createElement("br", null))
                }
                render() {
                    var {
                        showConfirmDialog: e
                    } = this.state;
                    return r().createElement("div", {
                        className: "hr-monaco-reset-code"
                    }, e && this.renderConfirmDialog(), r().createElement(c.ZP, {
                        className: "cursor reset-btn",
                        onClick: this.onClick,
                        title: "Reset Code",
                        type: "button"
                    }, r().createElement(s.Z, {
                        className: "icon-grey reset-code-icon"
                    })))
                }
            }(0, l.Z)(m, "defaultProps", {
                resetCode: i.ZT
            })
        },
        "2HnP": (e, t, a) => {
            a.d(t, {
                Z: () => C
            });
            var l = a("L5+t"),
                o = a("DTvD"),
                r = a.n(o),
                i = a("17x9"),
                n = a.n(i),
                c = a("EuOW"),
                s = a("kU9v"),
                m = a("VD8A"),
                d = a("5F93"),
                p = a("6zQX"),
                h = a("PClM"),
                u = a("CmRW"),
                g = a("TBNV"),
                x = a("ZScv"),
                v = "".concat((0, c.XF)(), "rest/upload_respawn");
            class f extends o.Component {
                constructor(e) {
                    super(e), (0, l.Z)(this, "setUpUploadModal", (() => {
                        !0 === p.wS.get("block_upload_file_confirm") ? this.setState({
                            isUploadModalOpen: !0
                        }) : this.setState({
                            isUploadConfirmOpen: !0
                        })
                    })), (0, l.Z)(this, "onUploadConfirmClose", (() => {
                        this.setState({
                            isUploadConfirmOpen: !1
                        });
                        var {
                            onUploadModalClose: e
                        } = this.props;
                        e()
                    })), (0, l.Z)(this, "onUploadConfirm", (() => {
                        this.setState({
                            isUploadModalOpen: !0,
                            isUploadConfirmOpen: !1
                        })
                    })), (0, l.Z)(this, "toggleConfirmUpload", (e => {
                        var t = e.target.checked;
                        p.wS.set("block_upload_file_confirm", t)
                    })), (0, l.Z)(this, "onInputChange", ((e, t) => {
                        if ("languageSelect" === e) this.setState({
                            selectedLanguage: t.target.value
                        });
                        else if ("fileSelect" === e) {
                            var a = t.target.files[0];
                            this.setState({
                                selectedFile: a,
                                fileName: a.name
                            })
                        }
                    })), (0, l.Z)(this, "onUploadModalClose", (() => {
                        this.setState({
                            isUploadModalOpen: !1,
                            selectedFile: void 0,
                            selectedLanguage: "auto-detect"
                        });
                        var {
                            onUploadModalClose: e
                        } = this.props;
                        e()
                    })), (0, l.Z)(this, "uploadSolution", (() => {
                        var {
                            selectedLanguage: e,
                            selectedFile: t
                        } = this.state, {
                            currentLanguage: a,
                            supportedLanguages: l,
                            onUploadCode: o,
                            onUploadModalClose: r
                        } = this.props;
                        if (t) {
                            var i = new FormData;
                            i.append("language", e || "auto-detect"), i.append("source_file", t), i.append("is_file_upload", "1"), i.append("current_language", a), this.setState({
                                uploadingSolution: !0,
                                isUploadConfirmOpen: !1
                            }), (0, s.ajaxUploadWithToken)({
                                url: v,
                                data: i,
                                success: e => {
                                    if (this.setState({
                                            uploadingSolution: !1
                                        }), e.ok) {
                                        var {
                                            language: t,
                                            source: a
                                        } = e.data;
                                        l.indexOf(t) > -1 ? (o(t, a), r(), this.setState({
                                            isUploadModalOpen: !1
                                        })) : this.setState({
                                            uploadErr: "Language not supported for this challenge"
                                        })
                                    } else this.setState({
                                        uploadErr: e.message
                                    })
                                }
                            })
                        }
                    })), this.state = {
                        isUploadModalOpen: !1,
                        isUploadConfirmOpen: !1,
                        uploadingSolution: !1,
                        uploadErr: !1,
                        selectedLanguage: "auto-detect",
                        fileName: ""
                    }
                }
                componentDidMount() {
                    this.setUpUploadModal()
                }
                renderUploadConfirmForm() {
                    return r().createElement(h.Z, {
                        theme: "theme-m",
                        title: "Attn: Upload file",
                        className: "codeeditor-modal",
                        open: !0,
                        onConfirm: this.onUploadConfirm,
                        onCancel: this.onUploadConfirmClose,
                        onClose: this.onUploadConfirmClose
                    }, r().createElement("p", null, "Uploading a file will replace the current content in your code editor. Would you like to continue?"), r().createElement("form", {
                        className: "confirm-upload-form"
                    }, r().createElement("label", {
                        className: "confirm-upload-label"
                    }, r().createElement("input", {
                        type: "checkbox",
                        className: "confirm-upload",
                        onChange: this.toggleConfirmUpload
                    }), "Skip this alert next time")))
                }
                renderUploadForm() {
                    var {
                        uploadingSolution: e,
                        uploadErr: t,
                        selectedFile: a,
                        fileName: l
                    } = this.state;
                    return r().createElement("form", {
                        className: "confirm-upload"
                    }, r().createElement("div", {
                        className: "file-upload-wrapper mlB"
                    }, r().createElement("label", {
                        className: "file-label"
                    }, "Source File"), r().createElement(x.Z, {
                        onChange: this.onInputChange.bind(this, "fileSelect"),
                        "data-id": "source_file"
                    }, r().createElement("div", {
                        className: "fake-input-wrap"
                    }, r().createElement("input", {
                        type: "text",
                        className: "fake-input",
                        readOnly: !0,
                        value: l
                    }), r().createElement(u.KM, {
                        className: "fake-button btn",
                        type: "button"
                    }, "Select File")))), r().createElement("div", {
                        className: "file-upload-wrapper"
                    }, r().createElement("label", {
                        className: "language-label"
                    }, "Language"), r().createElement("div", {
                        className: "languages-wrapper"
                    }, r().createElement("select", {
                        className: "select-language",
                        name: "language",
                        type: "select",
                        onChange: this.onInputChange.bind(this, "languageSelect")
                    }, r().createElement("option", {
                        value: "auto-detect"
                    }, "Auto Detect"), r().createElement("option", {
                        value: "current-language"
                    }, "Current Language"), Object.keys(m.hy).map((e => r().createElement("option", {
                        key: e,
                        value: e
                    }, m.hy[e])))))), t && r().createElement("p", {
                        className: "form-error"
                    }, t), r().createElement("div", {
                        className: "clearfix"
                    }, r().createElement("div", {
                        className: "pull-right"
                    }, r().createElement(u.KM, {
                        disabled: e || !a,
                        onClick: this.uploadSolution,
                        type: "button"
                    }, "Upload"))))
                }
                render() {
                    var {
                        isUploadConfirmOpen: e,
                        isUploadModalOpen: t
                    } = this.state;
                    return r().createElement("div", null, e && this.renderUploadConfirmForm(), t && r().createElement(g.Z, {
                        theme: "theme-m",
                        title: "Upload Dialog",
                        modalClass: "code-upload-modal",
                        open: !0,
                        onClose: this.onUploadModalClose
                    }, this.renderUploadForm()))
                }
            }(0, l.Z)(f, "propTypes", {
                currentLanguage: n().string.isRequired,
                supportedLanguages: n().array,
                onUploadCode: n().func,
                onUploadModalClose: n().func
            }), (0, l.Z)(f, "defaultProps", {
                supportedLanguages: [],
                onUploadCode: d.ZT,
                onUploadModalClose: d.ZT
            });
            const C = f
        },
        HLVo: (e, t, a) => {
            a.d(t, {
                Z: () => c
            });
            var l = a("+9dH"),
                o = a("gSVb"),
                r = a("PRvr"),
                i = a("DTvD"),
                n = a.n(i);
            a("kRiR");
            const c = e => {
                var {
                    className: t = ""
                } = e, a = (0, r.Z)(e, ["className"]);
                return a = (0, o.Z)({}, a, {
                    className: "".concat(t, " ui-svg-icon")
                }), n().createElement("svg", (0, l.Z)({
                    viewBox: "0 0 64 64",
                    width: "1em",
                    height: "1em"
                }, a, {
                    fill: "currentColor"
                }), n().createElement("path", {
                    style: {
                        lineHeight: "normal",
                        textIndent: 0,
                        textAlign: "start",
                        textDecorationLine: "none",
                        textDecorationStyle: "solid",
                        textDecorationColor: "#000",
                        textTransform: "none",
                        blockProgression: "tb",
                        isolation: "auto",
                        mixBlendMode: "normal"
                    },
                    d: "M5.979 3.98A2 2 0 004 6.26V22a2 2 0 104 0V10.83l12.586 12.586a2 2 0 102.828-2.83L10.828 8H22a2 2 0 100-4H6.244a2 2 0 00-.265-.02zm51.982.002A2 2 0 0057.75 4H42a2 2 0 100 4h11.172L40.586 20.586a2 2 0 002.828 2.83L56 10.83V22a2 2 0 104 0V6.246a2 2 0 00-2.04-2.264zM5.97 39.972A2 2 0 004 42v16a2 2 0 000 .012 2 2 0 00.008.164 2 2 0 00.002.025 2 2 0 00.021.149 2 2 0 00.01.056 2 2 0 00.186.516 2 2 0 00.023.045 2 2 0 00.078.129 2 2 0 00.026.039 2 2 0 00.388.418 2 2 0 00.02.017 2 2 0 001.191.428A2 2 0 006 60h16a2 2 0 100-4H10.83l12.584-12.586a2 2 0 00-1.453-3.432 2 2 0 00-1.375.604L8 53.172V42a2 2 0 00-2.03-2.027zm52 0A2 2 0 0056 42v11.172L43.414 40.586a2 2 0 00-1.435-.606 2 2 0 00-1.393 3.434L53.17 56H42a2 2 0 100 4h16a2 2 0 00.592-.09 2 2 0 00.004-.002 2 2 0 00.183-.066 2 2 0 00.012-.006 2 2 0 00.168-.082 2 2 0 00.008-.006 2 2 0 00.27-.178 2 2 0 00.074-.06 2 2 0 00.125-.117 2 2 0 00.005-.006 2 2 0 00.243-.307 2 2 0 00.002-.004 2 2 0 00.097-.17 2 2 0 00.002-.004 2 2 0 00.143-.369 2 2 0 00.002-.008 2 2 0 00.068-.478A2 2 0 0060 58V42a2 2 0 00-2.03-2.027z",
                    fontWeight: 400,
                    fontFamily: "sans-serif",
                    overflow: "visible"
                }))
            }
        },
        yLnG: (e, t, a) => {
            a.d(t, {
                Z: () => c
            });
            var l = a("+9dH"),
                o = a("gSVb"),
                r = a("PRvr"),
                i = a("DTvD"),
                n = a.n(i);
            a("kRiR");
            const c = e => {
                var {
                    className: t = ""
                } = e, a = (0, r.Z)(e, ["className"]);
                return a = (0, o.Z)({}, a, {
                    className: "".concat(t, " ui-svg-icon")
                }), n().createElement("svg", (0, l.Z)({
                    viewBox: "0 0 100 100",
                    width: "1em",
                    height: "1em"
                }, a, {
                    fill: "currentColor"
                }), n().createElement("path", {
                    d: "M94.59 5.41a3 3 0 00-4.24 0L67.82 27.94 66 11.21a3 3 0 10-6 .65l2.5 22.95v.36a3 3 0 00.09.31c0 .07.05.14.08.21a3 3 0 00.16.31l.1.17a3 3 0 00.79.79l.17.1.31.17.21.08.31.09h.36L88.14 40h.33a3 3 0 00.32-6l-16.73-1.82L94.59 9.66a3 3 0 000-4.25zM91.45 62.7a3 3 0 00-3.31-2.7l-22.95 2.5h-.36l-.31.09-.21.08-.32.17-.17.1a3 3 0 00-.79.79l-.1.17a3 3 0 00-.16.31c0 .07-.06.14-.08.21a3 3 0 00-.09.31v.36L60 88.14a3 3 0 002.66 3.31h.33a3 3 0 003-2.68l1.82-16.72 22.53 22.54a3 3 0 004.24-4.24L72.06 67.82 88.79 66a3 3 0 002.66-3.3zM5.41 9.66l22.53 22.52L11.21 34a3 3 0 00.32 6h.33l22.95-2.5h.36l.31-.09.21-.08.31-.17.17-.1a3 3 0 00.79-.79l.1-.17a3 3 0 00.16-.31c0-.07.06-.14.08-.21a3 3 0 00.09-.31v-.36L40 11.86a3 3 0 10-6-.65l-1.82 16.73L9.66 5.41a3 3 0 00-4.25 4.25zm0 84.93a3 3 0 004.24 0l22.53-22.53L34 88.79a3 3 0 003 2.68h.33A3 3 0 0040 88.14l-2.5-22.95v-.36a3 3 0 00-.09-.31c0-.07-.05-.14-.08-.21a3 3 0 00-.16-.31l-.1-.17a3 3 0 00-.79-.79l-.17-.1-.31-.17-.21-.08-.31-.09h-.36L11.86 60a3 3 0 00-.65 6l16.73 1.82L5.41 90.34a3 3 0 000 4.25z"
                }))
            }
        },
        F1Pe: (e, t, a) => {
            a.d(t, {
                Z: () => c
            });
            var l = a("+9dH"),
                o = a("gSVb"),
                r = a("PRvr"),
                i = a("DTvD"),
                n = a.n(i);
            a("kRiR");
            const c = e => {
                var {
                    className: t = ""
                } = e, a = (0, r.Z)(e, ["className"]);
                return a = (0, o.Z)({}, a, {
                    className: "".concat(t, " ui-svg-icon")
                }), n().createElement("svg", (0, l.Z)({
                    viewBox: "0 0 48 48",
                    width: "1em",
                    height: "1em"
                }, a, {
                    fill: "currentColor"
                }), null, n().createElement("path", {
                    d: "M40 8.9C31.7.1 17.7-.3 8.9 8L5.7 4.9c-.4-.4-.9-.7-1.5-.7C3 4.2 2 5.2 2 6.4v8.8c0 1.2 1 2.2 2.2 2.2H13c.6 0 1.2-.2 1.6-.7.9-.9.8-2.3 0-3.1L12 11.1c3.3-3 7.5-4.7 12-4.7 9.7 0 17.6 7.9 17.6 17.6S33.7 41.6 24 41.6c-9.7 0-17.6-7.9-17.6-17.6 0-1.2-1-2.2-2.2-2.2C3 21.8 2 22.8 2 24c0 5.6 2.1 11 6 15.1 8.3 8.8 22.3 9.3 31.1.9 8.8-8.3 9.2-22.3.9-31.1z"
                }), n().createElement("path", {
                    d: "M26.6 31.4c.4.4.9.6 1.4.6s1-.2 1.4-.6l6-6c.8-.8.8-2 0-2.8l-6-6c-.8-.8-2-.8-2.8 0-.8.8-.8 2 0 2.8l4.6 4.6-4.6 4.6c-.8.8-.8 2 0 2.8zm-5.2-14.8c-.8-.8-2-.8-2.8 0l-6 6c-.8.8-.8 2 0 2.8l6 6c.4.4.9.6 1.4.6s1-.2 1.4-.6c.8-.8.8-2 0-2.8L16.8 24l4.6-4.6c.8-.8.8-2 0-2.8z"
                }))
            }
        },
        Pb0E: (e, t, a) => {
            a.d(t, {
                Z: () => c
            });
            var l = a("+9dH"),
                o = a("gSVb"),
                r = a("PRvr"),
                i = a("DTvD"),
                n = a.n(i);
            a("kRiR");
            const c = e => {
                var {
                    className: t = ""
                } = e, a = (0, r.Z)(e, ["className"]);
                return a = (0, o.Z)({}, a, {
                    className: "".concat(t, " ui-svg-icon")
                }), n().createElement("svg", (0, l.Z)({
                    viewBox: "0 0 100 100",
                    width: "1em",
                    height: "1em"
                }, a, {
                    fill: "currentColor"
                }), n().createElement("path", {
                    d: "M10.82 37.94a7 7 0 00-7 7v10.12a7 7 0 007 7H17q.51 1.4 1.15 2.76l-4.35 4.34a7 7 0 000 9.9l7.16 7.16a7 7 0 009.9 0l4.35-4.35q1.36.63 2.76 1.15v6.14a7 7 0 007 7h10.09a7 7 0 007-7V83q1.4-.51 2.76-1.15l4.35 4.35a7 7 0 009.9 0l7.16-7.16a7 7 0 000-9.9l-4.35-4.35q.63-1.36 1.15-2.76h6.14a7 7 0 007-7V44.94a7 7 0 00-7-7H83q-.51-1.41-1.14-2.76l4.35-4.34a7 7 0 000-9.9l-7.16-7.16a7 7 0 00-9.9 0l-4.35 4.35q-1.36-.63-2.76-1.15v-6.15a7 7 0 00-7-7h-10.1a7 7 0 00-7 7V17q-1.4.51-2.76 1.15l-4.35-4.35a7 7 0 00-9.9 0l-7.16 7.16a7 7 0 000 9.9l4.34 4.35q-.63 1.36-1.15 2.76zm13.07-5.47L18 26.58a1 1 0 010-1.41L25.17 18a1 1 0 011.41 0l5.88 5.88a3 3 0 003.54.52 29.21 29.21 0 015.78-2.4 3 3 0 002.15-2.88v-8.29a1 1 0 011-1h10.13a1 1 0 011 1v8.31A3 3 0 0058.22 22 29 29 0 0164 24.4a3 3 0 003.56-.51L73.41 18a1 1 0 011.41 0L82 25.17a1 1 0 010 1.41l-5.88 5.88A3 3 0 0075.6 36a29 29 0 012.4 5.78 3 3 0 002.88 2.16h8.32a1 1 0 011 1v10.12a1 1 0 01-1 1h-8.34A3 3 0 0078 58.22 29 29 0 0175.6 64a3 3 0 00.51 3.56L82 73.42a1 1 0 010 1.41L74.83 82a1 1 0 01-1.41 0l-5.88-5.88A3 3 0 0064 75.6a29 29 0 01-5.78 2.4 3 3 0 00-2.16 2.88v8.31a1 1 0 01-1 1H44.94a1 1 0 01-1-1v-8.33A3 3 0 0041.78 78 29.07 29.07 0 0136 75.59a3 3 0 00-3.56.51L26.59 82a1 1 0 01-1.41 0L18 74.83a1 1 0 010-1.41l5.88-5.88A3 3 0 0024.4 64a29.06 29.06 0 01-2.4-5.78 3 3 0 00-2.88-2.16h-8.3a1 1 0 01-1-1V44.94a1 1 0 011-1h8.31A3 3 0 0022 41.78 29.06 29.06 0 0124.4 36a3 3 0 00-.51-3.53z"
                }), n().createElement("path", {
                    d: "M50 68.94A18.94 18.94 0 1031.06 50 19 19 0 0050 68.94zm0-31.87A12.94 12.94 0 1137.06 50 13 13 0 0150 37.06z"
                }))
            }
        }
    }
]);
//# sourceMappingURL=https://hrcdn.net/fcore/assets/sourcemaps/modules-node_modules_app-server_es_ui_component_editors_hr_monaco_editor_full_screen_button_j-cd6705-43c7a735.js.map