"use strict";
(self.webpackChunkhackerrank_lib = self.webpackChunkhackerrank_lib || []).push([
    ["modules-node_modules_ui-kit_es_components_selectable_dropdown_menu_selectable_dropdown_menu_js"], {
        t0az: (e, t, s) => {
            s.d(t, {
                Z: () => _
            });
            var n = s("+9dH"),
                o = s("PRvr"),
                r = s("L5+t"),
                i = s("DTvD"),
                a = s.n(i),
                l = s("TSYQ"),
                u = s.n(l),
                c = s("Wwog"),
                m = s("LNbi"),
                d = s("GS3/"),
                h = s("qANn"),
                p = s("IMAx"),
                {
                    Provider: I,
                    Consumer: v
                } = (0, i.createContext)(),
                f = s("PPtz"),
                C = ["menuContext", "className", "children", "value", "onClick", "clickableSelector"],
                w = {
                    [h.lK.LISTBOX]: "option",
                    [h.lK.MENU]: "menuitem"
                };
            class k extends i.PureComponent {
                constructor() {
                    super(...arguments), (0, r.Z)(this, "wrapperRef", (0, i.createRef)()), (0, r.Z)(this, "onClick", (e => {
                        var {
                            menuContext: t,
                            onClick: s
                        } = this.props;
                        t.onItemClick(this), s && s(e)
                    })), (0, r.Z)(this, "onMouseOver", (() => {
                        var {
                            menuContext: e
                        } = this.props;
                        e.onFocusItem(this)
                    }))
                }
                componentDidMount() {
                    var {
                        menuContext: e
                    } = this.props;
                    e.register(this)
                }
                componentWillUnmount() {
                    var {
                        menuContext: e
                    } = this.props;
                    e.unregister(this)
                }
                gotoClickableItem() {
                    var {
                        clickableSelector: e
                    } = this.props, {
                        current: t
                    } = this.wrapperRef;
                    if (e && t) {
                        var s = t.querySelector(e);
                        s && s.click()
                    }
                }
                render() {
                    var e = this.props,
                        {
                            menuContext: {
                                focussedItem: t,
                                as: s
                            },
                            className: r,
                            children: i,
                            value: l,
                            onClick: c,
                            clickableSelector: m
                        } = e,
                        d = (0, o.Z)(e, C),
                        h = t === this,
                        p = u()("selectable-menu-item", r, {
                            "selectable-menu-item--focussed": h
                        }),
                        I = "function" == typeof i ? i({
                            isFocussed: h
                        }) : i;
                    return a().createElement("div", (0, n.Z)({
                        role: w[s]
                    }, d, {
                        ref: this.wrapperRef,
                        className: p,
                        onClick: this.onClick,
                        onMouseOver: this.onMouseOver,
                        onFocus: this.onMouseOver,
                        tabIndex: h ? 0 : -1,
                        "aria-selected": this.props.hasAriaSelected ? h : void 0
                    }), I)
                }
            }(0, r.Z)(k, "defaultProps", {
                clickableSelector: "a, button",
                hasAriaSelected: !0
            });
            const x = (0, f.Z)("Menu.Item should be used inside Menu", v, "menuContext")(k);
            var b = s("vxMJ"),
                Z = ["menuClassName", "direction", "title", "handleElement", "menuProps", "children", "as", "selectedValue", "onSelect"],
                g = ["selectedValue", "title", "menuClassName", "direction", "menuProps", "className", "theme", "as"];
            class S extends i.Component {
                constructor() {
                    var e;
                    super(...arguments), e = this, (0, r.Z)(this, "isFocussed", !1), (0, r.Z)(this, "menuRef", a().createRef()), (0, r.Z)(this, "menuItems", []), (0, r.Z)(this, "memoizedProvider", (0, c.Z)(this.getProviderValue.bind(this))), (0, r.Z)(this, "state", {
                        focussedItemIndex: -1
                    }), (0, r.Z)(this, "focusItem", (e => {
                        this.setState({
                            focussedItemIndex: this.menuItems.indexOf(e)
                        })
                    })), (0, r.Z)(this, "onItemClick", (function(t) {
                        var s = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                            {
                                onSelect: n
                            } = e.props,
                            {
                                value: o
                            } = t.props;
                        n && n(o), s && t.gotoClickableItem()
                    })), (0, r.Z)(this, "onKeyDown", (e => {
                        if (!(e.ctrlKey || e.altKey || e.shiftKey || e.metaKey)) {
                            var {
                                focussedItemIndex: t
                            } = this.state, {
                                dropdownContext: {
                                    setOpenState: s
                                }
                            } = this.props, n = t;
                            switch (e.key) {
                                case b.n.Escape:
                                    return e.preventDefault(), void s(!1);
                                case b.n.ArrowUp:
                                case b.n.PageUp:
                                case b.n.Home:
                                    e.preventDefault(), 0 === t && (n = this.menuItems.length);
                                    var o = this.menuItems[e.key === b.n.ArrowUp ? n - 1 : 0];
                                    return void this.focusItem(o);
                                case b.n.ArrowDown:
                                case b.n.PageDown:
                                case b.n.End:
                                    e.preventDefault(), t === this.menuItems.length - 1 && (n = -1);
                                    var r = this.menuItems[e.key === b.n.ArrowDown ? n + 1 : this.menuItems.length - 1];
                                    return void this.focusItem(r);
                                case b.n.Enter:
                                case b.n.Space:
                                    e.preventDefault();
                                    var {
                                        dropdownContext: {
                                            setOpenState: i
                                        }
                                    } = this.props;
                                    i(!1);
                                    var a = this.menuItems[t];
                                    return void this.onItemClick(a, !0);
                                default:
                                    return
                            }
                        }
                    })), (0, r.Z)(this, "registerMenuItem", (e => {
                        this.menuItems.push(e);
                        var {
                            selectedValue: t
                        } = this.props;
                        t === e.props.value && this.setState({
                            focussedItemIndex: this.menuItems.length - 1
                        })
                    })), (0, r.Z)(this, "unregisterMenuItem", (e => {
                        var {
                            selectedValue: t
                        } = this.props;
                        this.menuItems = this.menuItems.filter((t => t !== e));
                        var {
                            focussedItemIndex: s
                        } = this.state, n = this.menuItems.findIndex((e => e.props.value === t));
                        n !== s && this.setState({
                            focussedItemIndex: n
                        })
                    }))
                }
                componentDidMount() {
                    this.focusMenu()
                }
                componentDidUpdate(e, t) {
                    var {
                        selectedValue: s,
                        dropdownContext: n
                    } = e, {
                        dropdownContext: o,
                        selectedValue: r
                    } = this.props, {
                        focussedItemIndex: i
                    } = this.state;
                    if (n.open !== o.open && this.focusMenu(), t.focussedItemIndex !== i && this.menuRef.current) {
                        var a = this.menuRef.current.querySelector('[aria-selected="true"]');
                        if (a && a.focus && a.focus(), a && a.scrollIntoView) return void a.scrollIntoView({
                            behavior: "smooth",
                            block: "nearest"
                        })
                    }
                    if (s !== r) {
                        var l = this.menuItems.find((e => e.props.value === r));
                        if (!l) return;
                        this.focusItem(l)
                    }
                }
                focusMenu() {
                    var {
                        dropdownContext: {
                            open: e
                        }
                    } = this.props, {
                        current: t
                    } = this.menuRef;
                    e && t && document.activeElement !== t && t.focus()
                }
                getProviderValue(e) {
                    var {
                        as: t
                    } = this.props;
                    return {
                        focussedItem: e < 0 || e >= this.menuItems.length ? null : this.menuItems[e],
                        register: this.registerMenuItem,
                        unregister: this.unregisterMenuItem,
                        onFocusItem: this.focusItem,
                        onItemClick: this.onItemClick,
                        as: t
                    }
                }
                render() {
                    var {
                        focussedItemIndex: e
                    } = this.state, t = this.props, {
                        menuClassName: s,
                        direction: r = "down",
                        title: i,
                        handleElement: l,
                        menuProps: c = {},
                        children: h,
                        as: p,
                        selectedValue: v,
                        onSelect: f
                    } = t, C = (0, o.Z)(t, Z), w = u()("dropdown-menu selectable-dropdown-menu__list", s, "selectable-dropdown-menu__list--".concat(r));
                    return a().createElement(I, {
                        value: this.memoizedProvider(e)
                    }, a().createElement(m.Z, (0, n.Z)({}, C, {
                        element: l,
                        className: "selectable-dropdown-menu__toggle"
                    }), i), a().createElement(d.Z, {
                        role: void 0,
                        tabIndex: void 0
                    }, a().createElement("div", (0, n.Z)({}, c, {
                        ref: this.menuRef,
                        tabIndex: "-1",
                        role: p,
                        className: w,
                        onKeyDown: this.onKeyDown
                    }), h)))
                }
            }

            function _(e) {
                var {
                    selectedValue: t,
                    title: s,
                    menuClassName: r,
                    direction: i,
                    menuProps: l,
                    className: c,
                    theme: m,
                    as: d = h.lK.LISTBOX
                } = e, I = (0, o.Z)(e, g), v = "dark" === m ? "selectable-dropdown-menu--dark" : "";
                return a().createElement(h.ZP, (0, n.Z)({
                    className: u()("selectable-dropdown-menu", v, c)
                }, I, {
                    closeHandleSelector: ".selectable-menu-item",
                    as: d
                }), a().createElement(p._e, null, (t => a().createElement(S, (0, n.Z)({}, e, {
                    dropdownContext: t
                })))))
            }(0, r.Z)(S, "defaultProps", {
                as: h.lK.LISTBOX
            }), _.Item = x
        }
    }
]);
//# sourceMappingURL=https://hrcdn.net/fcore/assets/sourcemaps/modules-node_modules_ui-kit_es_components_selectable_dropdown_menu_selectable_dropdown_menu_js-1ab2a0df.js.map