"use strict";
(self.webpackChunkhackerrank_lib = self.webpackChunkhackerrank_lib || []).push([
    ["modules-node_modules_ui-kit_es_components_dropdown_dropdown_js-node_modules_ui-kit_es_compone-0257e6"], {
        qANn: (e, o, r) => {
            r.d(o, {
                lK: () => l,
                ZP: () => u
            });
            var t = r("L5+t"),
                n = r("DTvD"),
                a = r("TSYQ"),
                s = r.n(a),
                d = r("37OS"),
                i = r.n(d),
                c = r("IMAx"),
                l = {
                    LISTBOX: "listbox",
                    MENU: "menu"
                };
            class p extends n.PureComponent {
                static getDerivedStateFromProps(e, o) {
                    var {
                        disabled: r,
                        open: t
                    } = e;
                    return r || e.open !== o.openValueFromProps ? {
                        open: !r && t,
                        openValueFromProps: e.open
                    } : null
                }
                constructor(e) {
                    super(e), (0, t.Z)(this, "setOpenState", (e => {
                        if (this.state.open !== e) {
                            var {
                                onOpen: o,
                                onClose: r
                            } = this.props;
                            this.setState({
                                open: e
                            }, e ? o : r)
                        }
                    })), this.state = {
                        open: e.open,
                        openValueFromProps: e.open
                    }
                }
                render() {
                    var {
                        className: e,
                        children: o,
                        closeHandleSelector: r,
                        disabled: t,
                        as: a,
                        shouldCloseOverIframes: d
                    } = this.props, {
                        open: i
                    } = this.state, l = {
                        open: i,
                        closeHandleSelector: r,
                        disabled: t,
                        setOpenState: this.setOpenState,
                        as: a,
                        shouldCloseOverIframes: d
                    };
                    return n.createElement(c.KG, {
                        value: l
                    }, n.createElement("div", {
                        className: s()("dropdown", e, {
                            open: i
                        })
                    }, o))
                }
            }(0, t.Z)(p, "defaultProps", {
                onOpen: i(),
                onClose: i(),
                open: !1,
                disabled: !1,
                as: l.MENU,
                onCloseOverIframeHandler: i()
            });
            const u = p
        },
        "GS3/": (e, o, r) => {
            r.d(o, {
                Z: () => m
            });
            var t = r("+9dH"),
                n = r("PRvr"),
                a = r("L5+t"),
                s = r("DTvD"),
                d = r.n(s),
                i = r("TSYQ"),
                c = r.n(i),
                l = r("dvg7"),
                p = r("IMAx"),
                u = ["className", "children", "dropdownContext"];
            class h extends s.PureComponent {
                constructor() {
                    super(...arguments), (0, a.Z)(this, "containerRef", d().createRef()), (0, a.Z)(this, "handleClick", (e => {
                        var {
                            closeHandleSelector: o,
                            setOpenState: r
                        } = this.props.dropdownContext;
                        o && e.target.closest(o) && r(!1)
                    })), (0, a.Z)(this, "closeDropdown", (e => {
                        var {
                            setOpenState: o
                        } = this.props.dropdownContext;
                        setTimeout((() => o(!1)))
                    })), (0, a.Z)(this, "closePopupOverIframe", (() => {
                        setTimeout((() => {
                            var e;
                            (null === (e = document) || void 0 === e ? void 0 : e.activeElement) instanceof HTMLIFrameElement && this.closeDropdown()
                        }), 0)
                    }))
                }
                componentDidMount() {
                    this.props.dropdownContext.shouldCloseOverIframes && window.addEventListener("blur", this.closePopupOverIframe), this.props.dropdownContext.open && this.containerRef.current && this.containerRef.current.container.focus()
                }
                componentDidUpdate(e) {
                    var {
                        dropdownContext: o
                    } = e, {
                        dropdownContext: r
                    } = this.props;
                    o.open !== r.open && r.open && this.containerRef.current && this.containerRef.current.container.focus()
                }
                componentWillUnmount() {
                    this.props.dropdownContext.shouldCloseOverIframes && window.removeEventListener("blur", this.closePopupOverIframe)
                }
                render() {
                    var e = this.props,
                        {
                            className: o,
                            children: r,
                            dropdownContext: {
                                open: a,
                                as: s
                            }
                        } = e,
                        i = (0, n.Z)(e, u);
                    return a ? d().createElement(l.Z, (0, t.Z)({
                        role: s,
                        tabIndex: -1
                    }, i, {
                        className: c()("dropdown-body", o),
                        ref: this.containerRef,
                        "aria-hidden": a ? "false" : "true",
                        onClick: this.handleClick,
                        onClickOutside: this.closeDropdown
                    }), r) : null
                }
            }
            const m = (0, p.mn)("DropdownBody can be only used inside Dropdown scope.")(h)
        },
        IMAx: (e, o, r) => {
            r.d(o, {
                KG: () => a,
                _e: () => s,
                mn: () => d
            });
            var t = r("DTvD"),
                n = r("PPtz"),
                {
                    Provider: a,
                    Consumer: s
                } = (0, t.createContext)();

            function d(e) {
                return (0, n.Z)(e, s, "dropdownContext")
            }
        },
        LNbi: (e, o, r) => {
            r.d(o, {
                Z: () => b
            });
            var t = r("+9dH"),
                n = r("PRvr"),
                a = r("L5+t"),
                s = r("DTvD"),
                d = r.n(s),
                i = r("TSYQ"),
                c = r.n(i),
                l = r("37OS"),
                p = r.n(l),
                u = r("IMAx"),
                h = r("vxMJ"),
                m = ["className", "children", "dropdownContext", "element"];
            class v extends s.PureComponent {
                constructor() {
                    super(...arguments), (0, a.Z)(this, "handleClick", (e => {
                        if ("keydown" === e.type) {
                            if (e.key !== h.n.Enter && e.key !== h.n.Space) return;
                            e.preventDefault()
                        }
                        var {
                            onClick: o,
                            dropdownContext: r
                        } = this.props, {
                            disabled: t,
                            open: n,
                            setOpenState: a
                        } = r;
                        o && o(e), t || a(!n)
                    }))
                }
                render() {
                    var e = this.props,
                        {
                            className: o,
                            children: r,
                            dropdownContext: {
                                open: a,
                                as: s
                            },
                            element: i
                        } = e,
                        l = (0, n.Z)(e, m);
                    return d().createElement(i, (0, t.Z)({}, l, {
                        "aria-haspopup": s,
                        "aria-expanded": a,
                        className: c()("dropdown-handle", o),
                        onClick: this.handleClick,
                        onKeyDown: this.handleClick
                    }), r)
                }
            }(0, a.Z)(v, "defaultProps", {
                onClick: p(),
                element: "div"
            });
            const b = (0, u.mn)("DropdownHandle can be only used inside Dropdown scope.")(v)
        },
        uAgT: (e, o, r) => {
            r.d(o, {
                Z: () => d
            }), r("ioFf");
            var t = r("L5+t"),
                n = r("FJMr");

            function a(e, o) {
                var r = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var t = Object.getOwnPropertySymbols(e);
                    o && (t = t.filter((function(o) {
                        return Object.getOwnPropertyDescriptor(e, o).enumerable
                    }))), r.push.apply(r, t)
                }
                return r
            }

            function s(e) {
                for (var o = 1; o < arguments.length; o++) {
                    var r = null != arguments[o] ? arguments[o] : {};
                    o % 2 ? a(Object(r), !0).forEach((function(o) {
                        (0, t.Z)(e, o, r[o])
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : a(Object(r)).forEach((function(o) {
                        Object.defineProperty(e, o, Object.getOwnPropertyDescriptor(r, o))
                    }))
                }
                return e
            }
            const d = (e, o) => {
                var r = "outset" === o;
                return {
                    control: (o, t) => {
                        var {
                            isFocused: a,
                            hasValue: d,
                            isMulti: i
                        } = t;
                        return s(s({}, o), {}, {
                            border: 0,
                            borderRadius: 0,
                            height: i ? "inherit" : n.inputHeight,
                            backgroundColor: r ? "var(--color-white)" : "var(--color-shade-lighter)",
                            boxShadow: e ? "inset 0 1px 4px rgba(var(--color-shade-medium-2-rgb), 0.5), 0 2px 0 ".concat(n.colorError) : a ? r ? "0px 3px 10px rgba(var(--color-shade-medium-2-rgb), 0.6), 0 2px 0 ".concat(n.colorShadeDark) : "inset 0 1px 4px rgba(var(--color-shade-medium-2-rgb), 0.5), 0 2px 0 ".concat(n.colorShadeDark) : d ? r ? "0px 3px 10px rgba(var(--color-shade-medium-2-rgb), 0.6), 0 0 0 transparent" : "inset 0 1px 4px var(--color-shade-medium-2), 0 0 0 transparent" : r ? "0px 3px 10px rgba(var(--color-shade-medium-2-rgb), 0.6), 0 0 0 transparent" : "inset 0 1px 4px rgba(var(--color-shade-medium-2-rgb), 0.5), 0 0 0 transparent"
                        })
                    },
                    valueContainer: (e, o) => {
                        var {
                            isMulti: r
                        } = o;
                        return s(s({}, e), {}, {
                            padding: r ? "4px 8px" : e.padding
                        })
                    },
                    menu: e => s(s({}, e), {}, {
                        boxShadow: "none",
                        borderRadius: 0,
                        borderBottomRightRadius: n.borderRadiusS,
                        borderBottomLeftRadius: n.borderRadiusS,
                        margin: 0
                    }),
                    menuList: e => s(s({}, e), {}, {
                        padding: 0,
                        borderBottomRightRadius: n.borderRadiusS,
                        borderBottomLeftRadius: n.borderRadiusS,
                        boxShadow: "0 3px 10px 0 rgba(115, 143, 147, 0.3)"
                    }),
                    indicatorSeparator: (e, o) => {
                        var {
                            selectProps: r,
                            hasValue: t
                        } = o;
                        return s(s({}, e), {}, {
                            display: r.isClearable && t ? "inline-block" : "none",
                            backgroundColor: "var(--color-shade-medium)"
                        })
                    },
                    clearIndicator: e => s(s({}, e), {}, {
                        transform: "scale(0.8)",
                        padding: n.spaceXs,
                        cursor: "pointer",
                        color: "var(--color-text-medium-dark)",
                        ":hover": {
                            color: "var(--color-text-dark)"
                        }
                    }),
                    dropdownIndicator: e => s(s({}, e), {}, {
                        transform: "scale(0.8)",
                        padding: n.spaceXs,
                        cursor: "pointer",
                        color: "var(--color-text-medium-dark)",
                        ":hover": {
                            color: "var(--color-text-dark)"
                        }
                    }),
                    option: (e, o) => {
                        var {
                            isSelected: r,
                            isFocused: t
                        } = o;
                        return s(s({}, e), {}, {
                            color: "var(--color-text-dark)",
                            cursor: "pointer",
                            backgroundColor: r ? "var(--color-shade-medium)" : t ? "var(--color-shade-light)" : "var(--color-white)",
                            ":active": {
                                backgroundColor: "var(--color-white)"
                            },
                            ":last-child": {
                                borderBottomLeftRadius: n.borderRadiusS,
                                borderBottomRightRadius: n.borderRadiusS
                            }
                        })
                    },
                    noOptionsMessage: e => s(s({}, e), {}, {
                        color: "var(--color-text-dark-faded)",
                        backgroundColor: "var(--color-white)"
                    }),
                    placeholder: e => s(s({}, e), {}, {
                        color: "var(--color-shade-dark)"
                    }),
                    singleValue: e => s(s({}, e), {}, {
                        color: "var(--color-shade-darker)"
                    }),
                    multiValue: e => s(s({}, e), {}, {
                        borderRadius: n.borderRadiusS,
                        backgroundColor: "var(--card-shadow-2)",
                        boxShadow: "0 2px 3px 0 var(--color-multivalue-box-shadow)",
                        color: n.colorSecondary,
                        marginBottom: n.spaceXs
                    }),
                    multiValueLabel: e => s(s({}, e), {}, {
                        color: "var(--color-shade-darker)"
                    }),
                    multiValueRemove: e => s(s({}, e), {}, {
                        cursor: "pointer",
                        transform: "scale(0.8)",
                        color: "var(--color-text-medium-dark)",
                        ":hover": {
                            color: "var(--color-text-dark)"
                        }
                    }),
                    input: e => s(s({}, e), {}, {
                        color: "var(--color-shade-darker)",
                        'input[type = "text"]': {
                            marginBottom: "0",
                            boxShadow: "none",
                            transition: "none"
                        },
                        'input[type = "text"]:focus': {
                            boxShadow: "none"
                        }
                    })
                }
            }
        },
        vxMJ: (e, o, r) => {
            r.d(o, {
                n: () => t
            });
            var t = {
                ArrowUp: "ArrowUp",
                ArrowDown: "ArrowDown",
                ArrowLeft: "ArrowLeft",
                ArrowRight: "ArrowRight",
                Home: "Home",
                End: "End",
                PageUp: "PageUp",
                PageDown: "PageDown",
                Tab: "Tab",
                Space: " ",
                Enter: "Enter",
                Escape: "Escape"
            }
        },
        PPtz: (e, o, r) => {
            r.d(o, {
                Z: () => n
            });
            var t = r("POct");

            function n(e, o, r) {
                return (0, t.UZ)(o, (o => {
                    if (!o) throw new Error(e);
                    return {
                        [r]: o
                    }
                }))
            }
        }
    }
]);
//# sourceMappingURL=https://hrcdn.net/fcore/assets/sourcemaps/modules-node_modules_ui-kit_es_components_dropdown_dropdown_js-node_modules_ui-kit_es_compone-0257e6-e16767a4.js.map