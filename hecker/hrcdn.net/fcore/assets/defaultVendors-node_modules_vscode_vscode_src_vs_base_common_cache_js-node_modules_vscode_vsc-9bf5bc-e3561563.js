"use strict";
(self.webpackChunkhackerrank_lib = self.webpackChunkhackerrank_lib || []).push([
    ["defaultVendors-node_modules_vscode_vscode_src_vs_base_common_cache_js-node_modules_vscode_vsc-9bf5bc"], {
        wqGW: (e, t, i) => {
            function s(e) {
                return e
            }
            i.d(t, {
                t2: () => n
            }), i("rJtg");
            class n {
                constructor(e, t) {
                    this.lastCache = void 0, this.lastArgKey = void 0, "function" == typeof e ? (this._fn = e, this._computeKey = s) : (this._fn = t, this._computeKey = e.getCacheKey)
                }
                get(e) {
                    const t = this._computeKey(e);
                    return this.lastArgKey !== t && (this.lastArgKey = t, this.lastCache = this._fn(e)), this.lastCache
                }
            }
        },
        iEs1: (e, t, i) => {
            i.d(t, {
                lA: () => o
            });
            var s = i("mYXM"),
                n = i("6hk+");
            const r = {
                    dialogError: (0, s.z)("dialog-error", "error"),
                    dialogWarning: (0, s.z)("dialog-warning", "warning"),
                    dialogInfo: (0, s.z)("dialog-info", "info"),
                    dialogClose: (0, s.z)("dialog-close", "close"),
                    treeItemExpanded: (0, s.z)("tree-item-expanded", "chevron-down"),
                    treeFilterOnTypeOn: (0, s.z)("tree-filter-on-type-on", "list-filter"),
                    treeFilterOnTypeOff: (0, s.z)("tree-filter-on-type-off", "list-selection"),
                    treeFilterClear: (0, s.z)("tree-filter-clear", "close"),
                    treeItemLoading: (0, s.z)("tree-item-loading", "loading"),
                    menuSelection: (0, s.z)("menu-selection", "check"),
                    menuSubmenu: (0, s.z)("menu-submenu", "chevron-right"),
                    menuBarMore: (0, s.z)("menubar-more", "more"),
                    scrollbarButtonLeft: (0, s.z)("scrollbar-button-left", "triangle-left"),
                    scrollbarButtonRight: (0, s.z)("scrollbar-button-right", "triangle-right"),
                    scrollbarButtonUp: (0, s.z)("scrollbar-button-up", "triangle-up"),
                    scrollbarButtonDown: (0, s.z)("scrollbar-button-down", "triangle-down"),
                    toolBarMore: (0, s.z)("toolbar-more", "more"),
                    quickInputBack: (0, s.z)("quick-input-back", "arrow-left"),
                    dropDownButton: (0, s.z)("drop-down-button", 60084),
                    symbolCustomColor: (0, s.z)("symbol-customcolor", 60252),
                    exportIcon: (0, s.z)("export", 60332),
                    workspaceUnspecified: (0, s.z)("workspace-unspecified", 60355),
                    newLine: (0, s.z)("newline", 60394),
                    thumbsDownFilled: (0, s.z)("thumbsdown-filled", 60435),
                    thumbsUpFilled: (0, s.z)("thumbsup-filled", 60436),
                    gitFetch: (0, s.z)("git-fetch", 60445),
                    lightbulbSparkleAutofix: (0, s.z)("lightbulb-sparkle-autofix", 60447),
                    debugBreakpointPending: (0, s.z)("debug-breakpoint-pending", 60377)
                },
                o = { ...n.T,
                    ...r
                }
        },
        V2Gl: (e, t, i) => {
            i.d(t, {
                G: () => n
            });
            const s = globalThis.performance && "function" == typeof globalThis.performance.now;
            class n {
                static create(e) {
                    return new n(e)
                }
                constructor(e) {
                    this._now = s && !1 === e ? Date.now : globalThis.performance.now.bind(globalThis.performance), this._startTime = this._now(), this._stopTime = -1
                }
                stop() {
                    this._stopTime = this._now()
                }
                reset() {
                    this._startTime = this._now(), this._stopTime = -1
                }
                elapsed() {
                    return -1 !== this._stopTime ? this._stopTime - this._startTime : this._now() - this._startTime
                }
            }
        },
        "0aW4": (e, t, i) => {
            i.d(t, {
                N: () => r
            });
            var s, n = i("MM2S");
            class r {
                constructor(e) {
                    const t = (0, n.Ki)(e);
                    this._defaultValue = t, this._asciiMap = r._createAsciiMap(t), this._map = new Map
                }
                static _createAsciiMap(e) {
                    const t = new Uint8Array(256);
                    return t.fill(e), t
                }
                set(e, t) {
                    const i = (0, n.Ki)(t);
                    e >= 0 && e < 256 ? this._asciiMap[e] = i : this._map.set(e, i)
                }
                get(e) {
                    return e >= 0 && e < 256 ? this._asciiMap[e] : this._map.get(e) || this._defaultValue
                }
                clear() {
                    this._asciiMap.fill(this._defaultValue), this._map.clear()
                }
            }! function(e) {
                e[e.False = 0] = "False", e[e.True = 1] = "True"
            }(s || (s = {}))
        },
        j3Ei: (e, t, i) => {
            i.d(t, {
                Y: () => o
            });
            var s, n = i("6PFX"),
                r = i("Aw1u");
            ! function(e) {
                e[e.LTR = 0] = "LTR", e[e.RTL = 1] = "RTL"
            }(s || (s = {}));
            class o extends r.e {
                constructor(e, t, i, s) {
                    super(e, t, i, s), this.selectionStartLineNumber = e, this.selectionStartColumn = t, this.positionLineNumber = i, this.positionColumn = s
                }
                toString() {
                    return "[" + this.selectionStartLineNumber + "," + this.selectionStartColumn + " -> " + this.positionLineNumber + "," + this.positionColumn + "]"
                }
                equalsSelection(e) {
                    return o.selectionsEqual(this, e)
                }
                static selectionsEqual(e, t) {
                    return e.selectionStartLineNumber === t.selectionStartLineNumber && e.selectionStartColumn === t.selectionStartColumn && e.positionLineNumber === t.positionLineNumber && e.positionColumn === t.positionColumn
                }
                getDirection() {
                    return this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn ? s.LTR : s.RTL
                }
                setEndPosition(e, t) {
                    return this.getDirection() === s.LTR ? new o(this.startLineNumber, this.startColumn, e, t) : new o(e, t, this.startLineNumber, this.startColumn)
                }
                getPosition() {
                    return new n.L(this.positionLineNumber, this.positionColumn)
                }
                getSelectionStart() {
                    return new n.L(this.selectionStartLineNumber, this.selectionStartColumn)
                }
                setStartPosition(e, t) {
                    return this.getDirection() === s.LTR ? new o(e, t, this.endLineNumber, this.endColumn) : new o(this.endLineNumber, this.endColumn, e, t)
                }
                static fromPositions(e, t = e) {
                    return new o(e.lineNumber, e.column, t.lineNumber, t.column)
                }
                static fromRange(e, t) {
                    return t === s.LTR ? new o(e.startLineNumber, e.startColumn, e.endLineNumber, e.endColumn) : new o(e.endLineNumber, e.endColumn, e.startLineNumber, e.startColumn)
                }
                static liftSelection(e) {
                    return new o(e.selectionStartLineNumber, e.selectionStartColumn, e.positionLineNumber, e.positionColumn)
                }
                static selectionsArrEqual(e, t) {
                    if (e && !t || !e && t) return !1;
                    if (!e && !t) return !0;
                    if (e.length !== t.length) return !1;
                    for (let i = 0, s = e.length; i < s; i++)
                        if (!this.selectionsEqual(e[i], t[i])) return !1;
                    return !0
                }
                static isISelection(e) {
                    return e && "number" == typeof e.selectionStartLineNumber && "number" == typeof e.selectionStartColumn && "number" == typeof e.positionLineNumber && "number" == typeof e.positionColumn
                }
                static createWithDirection(e, t, i, n, r) {
                    return r === s.LTR ? new o(e, t, i, n) : new o(i, n, e, t)
                }
            }
        },
        "L+r9": (e, t, i) => {
            i.d(t, {
                oQ: () => n
            }), i("iDmX");
            var s = i("MM2S");
            class n {
                constructor(e) {
                    this.values = e, this.prefixSum = new Uint32Array(e.length), this.prefixSumValidIndex = new Int32Array(1), this.prefixSumValidIndex[0] = -1
                }
                getCount() {
                    return this.values.length
                }
                insertValues(e, t) {
                    e = (0, s.AE)(e);
                    const i = this.values,
                        n = this.prefixSum,
                        r = t.length;
                    return 0 !== r && (this.values = new Uint32Array(i.length + r), this.values.set(i.subarray(0, e), 0), this.values.set(i.subarray(e), e + r), this.values.set(t, e), e - 1 < this.prefixSumValidIndex[0] && (this.prefixSumValidIndex[0] = e - 1), this.prefixSum = new Uint32Array(this.values.length), this.prefixSumValidIndex[0] >= 0 && this.prefixSum.set(n.subarray(0, this.prefixSumValidIndex[0] + 1)), !0)
                }
                setValue(e, t) {
                    return e = (0, s.AE)(e), t = (0, s.AE)(t), this.values[e] !== t && (this.values[e] = t, e - 1 < this.prefixSumValidIndex[0] && (this.prefixSumValidIndex[0] = e - 1), !0)
                }
                removeValues(e, t) {
                    e = (0, s.AE)(e), t = (0, s.AE)(t);
                    const i = this.values,
                        n = this.prefixSum;
                    if (e >= i.length) return !1;
                    const r = i.length - e;
                    return t >= r && (t = r), 0 !== t && (this.values = new Uint32Array(i.length - t), this.values.set(i.subarray(0, e), 0), this.values.set(i.subarray(e + t), e), this.prefixSum = new Uint32Array(this.values.length), e - 1 < this.prefixSumValidIndex[0] && (this.prefixSumValidIndex[0] = e - 1), this.prefixSumValidIndex[0] >= 0 && this.prefixSum.set(n.subarray(0, this.prefixSumValidIndex[0] + 1)), !0)
                }
                getTotalSum() {
                    return 0 === this.values.length ? 0 : this._getPrefixSum(this.values.length - 1)
                }
                getPrefixSum(e) {
                    return e < 0 ? 0 : (e = (0, s.AE)(e), this._getPrefixSum(e))
                }
                _getPrefixSum(e) {
                    if (e <= this.prefixSumValidIndex[0]) return this.prefixSum[e];
                    let t = this.prefixSumValidIndex[0] + 1;
                    0 === t && (this.prefixSum[0] = this.values[0], t++), e >= this.values.length && (e = this.values.length - 1);
                    for (let i = t; i <= e; i++) this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];
                    return this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], e), this.prefixSum[e]
                }
                getIndexOf(e) {
                    e = Math.floor(e), this.getTotalSum();
                    let t = 0,
                        i = this.values.length - 1,
                        s = 0,
                        n = 0,
                        o = 0;
                    for (; t <= i;)
                        if (s = t + (i - t) / 2 | 0, n = this.prefixSum[s], o = n - this.values[s], e < o) i = s - 1;
                        else {
                            if (!(e >= n)) break;
                            t = s + 1
                        }
                    return new r(s, e - o)
                }
            }
            class r {
                constructor(e, t) {
                    this.index = e, this.remainder = t, this._prefixSumIndexOfResultBrand = void 0, this.index = e, this.remainder = t
                }
            }
        }
    }
]);
//# sourceMappingURL=https://hrcdn.net/fcore/assets/sourcemaps/defaultVendors-node_modules_vscode_vscode_src_vs_base_common_cache_js-node_modules_vscode_vsc-9bf5bc-e3561563.js.map