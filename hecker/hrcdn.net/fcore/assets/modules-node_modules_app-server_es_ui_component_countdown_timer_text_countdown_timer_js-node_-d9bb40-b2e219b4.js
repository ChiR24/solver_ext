"use strict";
(self.webpackChunkhackerrank_lib = self.webpackChunkhackerrank_lib || []).push([
    ["modules-node_modules_app-server_es_ui_component_countdown_timer_text_countdown_timer_js-node_-d9bb40"], {
        JlLr: (e, t, a) => {
            a.d(t, {
                Z: () => p
            });
            var s = a("L5+t"),
                n = a("DTvD"),
                i = a.n(n),
                r = a("17x9"),
                l = a.n(r),
                c = a("wd/R"),
                o = a.n(c),
                m = a("UwUt"),
                d = a("5F93");
            class u extends i().Component {
                constructor(e) {
                    super(e), (0, s.Z)(this, "state", void 0), (0, s.Z)(this, "intervalObject", void 0), (0, s.Z)(this, "onTimerEnd", (() => {
                        this.props.onTimerEnd()
                    })), this.state = {
                        timeRemaining: ""
                    }, this.intervalObject = null
                }
                componentDidMount() {
                    this.setNewTimeDiff(), this.intervalObject = setInterval((() => {
                        this.setNewTimeDiff()
                    }), 1e3)
                }
                componentWillUnmount() {
                    this.clearIntervalObj()
                }
                clearIntervalObj() {
                    this.intervalObject && clearInterval(this.intervalObject)
                }
                setNewTimeDiff() {
                    var e = this.props.finishTimeMs - (new Date).getTime();
                    if (e <= 0) return this.clearIntervalObj(), void this.onTimerEnd();
                    var t = o().duration(e);
                    if (t.days() > 0) this.setState({
                        timeRemaining: i().createElement("span", {
                            className: "countdowntimer-days"
                        }, "".concat(t.days(), " ").concat(t.days() > 1 ? "days" : "day"))
                    });
                    else {
                        var a = (0, d.Ts)(t.hours()),
                            s = (0, d.Ts)(t.minutes()),
                            n = (0, d.Ts)(t.seconds()),
                            r = i().createElement("span", {
                                className: "countdowntimer-clock"
                            }, i().createElement("span", {
                                className: "countdowntimer-hours"
                            }, a), ":", i().createElement("span", {
                                className: "countdowntimer-minutes"
                            }, s), ":", i().createElement("span", {
                                className: "countdowntimer-seconds"
                            }, n));
                        this.setState({
                            timeRemaining: r
                        })
                    }
                }
                render() {
                    var {
                        timeRemaining: e
                    } = this.state, {
                        className: t
                    } = this.props;
                    return "" === e ? i().createElement(m.Z, {
                        className: "countdowntimer-loader",
                        diameter: 16
                    }) : i().createElement("span", {
                        className: t
                    }, this.state.timeRemaining)
                }
            }(0, s.Z)(u, "propTypes", {
                finishTimeMs: l().number.isRequired,
                onTimerEnd: l().func
            }), (0, s.Z)(u, "defaultProps", {
                onTimerEnd: function() {}
            });
            const p = u
        },
        A9aW: (e, t, a) => {
            a.d(t, {
                Z: () => b
            });
            var s = a("L5+t"),
                n = a("DTvD"),
                i = a.n(n),
                r = a("17x9"),
                l = a.n(r),
                c = a("LJb6"),
                o = a("TSYQ"),
                m = a.n(o),
                d = a("rpVu"),
                u = a("kU9v");
            (0, a("5F93").zC)(["feedback/feedback.*.svg"]);
            var p = [{
                    text: "Awesome, tell us more!",
                    rating: 1,
                    icon: "like",
                    title: "Like it"
                }, {
                    text: "Tell us more",
                    rating: 2,
                    icon: "cantsay",
                    title: "Maybe"
                }, {
                    text: "Tell us what went wrong",
                    rating: 3,
                    icon: "no",
                    title: "No"
                }],
                h = e => {
                    var {
                        selected: t,
                        clickHandler: a,
                        title: s,
                        icon: n,
                        assetPath: r
                    } = e;
                    return i().createElement("li", {
                        className: m()("rating", {
                            selected: t
                        }, n),
                        onClick: () => {
                            e.clickHandler(e.idxVal)
                        }
                    }, i().createElement("div", {
                        className: "feedback-img"
                    }, i().createElement("span", {
                        className: "overlay"
                    }), i().createElement("img", {
                        src: r("feedback/feedback-".concat(n, ".svg")),
                        className: "feedback-icon"
                    })), i().createElement("div", {
                        className: "feedback-title"
                    }, s))
                };
            class v extends i().Component {
                constructor(e) {
                    super(e), (0, s.Z)(this, "state", void 0), (0, s.Z)(this, "updateSelection", (e => {
                        this.setState({
                            selectedRating: e
                        }, (() => {
                            this.submitForm()
                        }))
                    })), (0, s.Z)(this, "updateComment", (e => {
                        this.setState({
                            comment: e.target.value
                        })
                    })), (0, s.Z)(this, "submitForm", (e => {
                        e && this.setState({
                            submitting: !0
                        });
                        var {
                            selectedRating: t,
                            comment: a
                        } = this.state, {
                            postUrl: s,
                            onSubmit: n,
                            featureId: i,
                            appUtil: {
                                location: {
                                    pathname: r
                                }
                            }
                        } = this.props;
                        (0, u.ajaxPutWithToken)({
                            url: s,
                            data: {
                                rating: t + 1,
                                description: a,
                                path: r
                            },
                            loadingMessage: !1,
                            success: () => {
                                e && (this.setState({
                                    submitted: !0
                                }), n && n(i))
                            },
                            error: () => {
                                this.setState({
                                    submitting: !1
                                })
                            }
                        })
                    })), (0, s.Z)(this, "renderFeedbackContainer", (() => {
                        var {
                            className: e,
                            theme: t
                        } = this.props, {
                            submitted: a
                        } = this.state;
                        return i().createElement("div", {
                            className: m()("feedback-modal", e, t)
                        }, a ? this.renderThanks() : this.renderFeedBack())
                    })), this.state = {
                        selectedRating: "",
                        comment: "",
                        submitted: !1,
                        submitting: !1
                    }
                }
                componentDidMount() {
                    var {
                        featureId: e,
                        onSeen: t
                    } = this.props;
                    t && t(e)
                }
                renderFeedBack() {
                    var {
                        appUtil: {
                            assetPath: e
                        },
                        title: t,
                        name: a,
                        desc: s,
                        onClose: n,
                        theme: r
                    } = this.props, {
                        selectedRating: l,
                        comment: c,
                        submitted: o,
                        submitting: d
                    } = this.state, u = "theme-m" === r ? "ui-btn ui-btn-primary" : m()("btn btn-primary btn-flat", {
                        disabled: d
                    }), v = "theme-m" === r ? "ui-icon-cross" : "icon-cancel-small";
                    return i().createElement("div", null, i().createElement("div", {
                        className: "cancel-icon",
                        onClick: n
                    }, i().createElement("i", {
                        className: v
                    })), i().createElement("div", {
                        className: "banner-img"
                    }, i().createElement("img", {
                        src: e("feedback/feedback-banner-".concat(a, ".svg")),
                        className: "feedback-banner"
                    })), i().createElement("h1", {
                        className: "feedback-main-title mdT mdB"
                    }, t), s && i().createElement("div", {
                        className: "msT msB feedback-description-light"
                    }, s), i().createElement("div", {
                        className: "ratings"
                    }, i().createElement("ul", null, p.map(((t, a) => i().createElement(h, {
                        onClick: this.updateSelection,
                        title: t.title,
                        className: p[l],
                        icon: t.icon,
                        key: a,
                        idxVal: a,
                        clickHandler: this.updateSelection,
                        assetPath: e,
                        selected: t.rating === l + 1
                    }))))), i().createElement("div", {
                        className: "selected-rating"
                    }, p[l] && p[l].text), "number" == typeof l && i().createElement("div", {
                        className: "submit-form"
                    }, i().createElement("div", {
                        className: "input-area"
                    }, i().createElement("textarea", {
                        className: "txt-area",
                        placeholder: "Write a comment (optional)",
                        onChange: this.updateComment,
                        value: c
                    })), i().createElement("button", {
                        className: u,
                        onClick: this.submitForm.bind(null, !0)
                    }, d ? "Submitting.." : "Submit")))
                }
                renderThanks() {
                    return i().createElement("div", {
                        className: "feedback-thanks"
                    }, i().createElement("div", {
                        className: "thanks-icon"
                    }, i().createElement("i", {
                        className: "icon-thumbs-up"
                    })), i().createElement("div", {
                        className: "thanks-title"
                    }, "Thanks for your feedback!"))
                }
                render() {
                    var {
                        onClose: e,
                        isStandalone: t
                    } = this.props;
                    return i().createElement("div", null, t ? this.renderFeedbackContainer() : i().createElement(c.Z, {
                        open: !0,
                        onClose: e,
                        modalClass: "feedback-modal-wrapper"
                    }, this.renderFeedbackContainer()))
                }
            }(0, s.Z)(v, "defaultProps", {
                title: "Love our new upgrade?",
                name: "default"
            }), (0, s.Z)(v, "propTypes", {
                onClose: l().func,
                featureId: l().number.isRequired,
                postUrl: l().string.isRequired,
                theme: l().string
            });
            const b = (0, d.Z)(v)
        },
        aK2r: (e, t, a) => {
            a.d(t, {
                Z: () => m
            });
            var s = a("DTvD"),
                n = a.n(s),
                i = a("17x9"),
                r = a.n(i),
                l = a("TBNV"),
                c = a("5F93");

            function o(e) {
                var {
                    open: t,
                    onClose: a,
                    title: s,
                    youtubeId: i,
                    className: r
                } = e;
                return n().createElement(l.Z, {
                    open: t,
                    onClose: a,
                    title: s,
                    theme: "theme-m",
                    modalClass: "video-modal",
                    className: r
                }, n().createElement("div", {
                    className: "frame-wrapper"
                }, n().createElement("iframe", {
                    id: "player-".concat(i),
                    className: "youtube-frame block-center",
                    type: "text/html",
                    src: "https://www.youtube.com/embed/".concat(i, "?").concat((0, c.UK)({
                        enablejsapi: 1,
                        version: 3,
                        autoplay: 1,
                        rel: 0,
                        origin: "https://www.hackerrank.com"
                    })),
                    frameBorder: "0",
                    allowFullScreen: !0
                })))
            }
            o.propTypes = {
                open: r().bool,
                onClose: r().func,
                title: r().string.isRequired,
                youtubeId: r().string.isRequired
            };
            const m = o
        },
        Pk8f: (e, t, a) => {
            a.d(t, {
                Z: () => u
            });
            var s = a("L5+t"),
                n = a("DTvD"),
                i = a.n(n),
                r = a("TSYQ"),
                l = a.n(r),
                c = a("CmRW"),
                o = a("sLMI"),
                m = a("PQeH");
            class d extends n.PureComponent {
                componentDidUpdate() {
                    this.shouldHideScrollBar() ? m.Z.hideScrollBars() : m.Z.showScrollBars()
                }
                componentWillUnmount() {
                    m.Z.showScrollBars()
                }
                shouldShowOverlay() {
                    var {
                        open: e,
                        overlay: t
                    } = this.props;
                    return e && t
                }
                shouldHideScrollBar() {
                    var {
                        open: e,
                        type: t,
                        popupTarget: a
                    } = this.props;
                    return (this.shouldShowOverlay() || e && "full-screen" === t) && !a
                }
                renderPopup() {
                    var {
                        children: e,
                        type: t,
                        handleClose: a,
                        className: s,
                        popupTarget: n
                    } = this.props, r = this.shouldShowOverlay();
                    return i().createElement(o.Z, {
                        target: n
                    }, i().createElement("div", {
                        className: l()("fab-popup", s)
                    }, r && i().createElement("div", {
                        className: "fab-popup-overlay",
                        onClick: a
                    }), i().createElement("div", {
                        className: l()("fab-popup-content", "fab-popup-".concat(t))
                    }, e)))
                }
                renderPopupHandle() {
                    var {
                        icon: e,
                        handleOpen: t,
                        active: a
                    } = this.props;
                    return i().createElement(c.KM, {
                        className: l()("fab-popup-handle", a ? "active" : "default"),
                        onClick: t
                    }, i().createElement("i", {
                        className: l()(e, "fab-popup-icon")
                    }))
                }
                render() {
                    var {
                        open: e
                    } = this.props;
                    return e ? this.renderPopup() : this.renderPopupHandle()
                }
            }(0, s.Z)(d, "defaultProps", {
                type: "menu",
                overlay: !0,
                active: !1
            });
            const u = d
        },
        cTaQ: (e, t, a) => {
            a.d(t, {
                Z: () => N
            });
            var s = a("+9dH"),
                n = a("PRvr"),
                i = a("DTvD"),
                r = a.n(i),
                l = a("TSYQ"),
                c = a.n(l),
                o = a("37OS"),
                m = a.n(o),
                d = a("L5+t"),
                u = a("vN+2"),
                p = a.n(u);
            class h extends i.Component {
                constructor() {
                    super(...arguments), (0, d.Z)(this, "currentPromise", null), (0, d.Z)(this, "failedCount", 0), (0, d.Z)(this, "state", {
                        optimisticState: this.props.initialValue
                    }), (0, d.Z)(this, "handleToggle", (e => {
                        var t = !this.state.optimisticState;
                        this.setState({
                            optimisticState: t
                        });
                        var a = this.props.action(t, e);
                        this.currentPromise = a, a.catch((e => {
                            this.failedCount++, this.currentPromise === a && this.setState((e => ({
                                optimisticState: this.failedCount % 2 == 0 ? e.optimisticState : !e.optimisticState
                            })), (() => {
                                this.failedCount = 0
                            }))
                        }))
                    }))
                }
                render() {
                    return this.props.children(this.state.optimisticState, this.handleToggle)
                }
            }(0, d.Z)(h, "defaultProps", {
                initialValue: !1,
                action: p()
            });
            const v = h;
            var b = a("CmRW"),
                f = ["initialValue", "className", "label", "onClick"];

            function k(e) {
                var {
                    initialValue: t,
                    className: a,
                    label: i,
                    onClick: l
                } = e, o = (0, n.Z)(e, f);
                return r().createElement(v, {
                    initialValue: t,
                    action: l
                }, ((e, t) => {
                    var n = e ? "star-icon-filled" : "",
                        l = e ? "ui-icon-star-filled" : "ui-icon-star";
                    return r().createElement(b.Dr, (0, s.Z)({
                        "aria-label": i(e),
                        className: "star-button",
                        onClick: t
                    }, o), r().createElement("i", {
                        className: c()(a, "star-icon", l, n)
                    }))
                }))
            }
            k.defaultProps = {
                initialValue: !1,
                label: e => e ? "Unstar" : "Star",
                onClick: m()
            };
            const N = k
        }
    }
]);
//# sourceMappingURL=https://hrcdn.net/fcore/assets/sourcemaps/modules-node_modules_app-server_es_ui_component_countdown_timer_text_countdown_timer_js-node_-d9bb40-b2e219b4.js.map